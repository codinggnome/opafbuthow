settings
{
	main
	{
		Description: "Play a random hero with unique enhanced abilities until you get killed by another player. Then it's time to discover the next. There may be bugs :D Fork of Kychahh's version by ThePwrBottom#1586. Unofficial version 1.7.4 - Updates and change log https://workshop.codes/H9J8T"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Spectators: 8
		Return To Lobby: Never
	}

	modes
	{
		Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 35

			enabled maps
			{
				Blizzard World
				Dorado
				Eichenwalde
				Hollywood
				King's Row
				Paris
			}
		}

		disabled Team Deathmatch
		{
			Game Length In Minutes: 15
		}

		General
		{
			Game Mode Start: Immediately
			Health Pack Respawn Time Scalar: 50%
			Hero Limit: Off
			Respawn As Random Hero: On
			Respawn Time Scalar: 25%
			Spawn Health Packs: Enabled
		}
	}

	heroes
	{
		General
		{
			Ana
			{
				Ammunition Clip Size Scalar: 500%
				Biotic Grenade Cooldown Time: 35%
				Damage Dealt: 150%
				Healing Received: 200%
				Health: 125%
				Movement Speed: 200%
				Projectile Speed: 500%
				Quick Melee: Off
				Sleep Dart Cooldown Time: 60%
				Ultimate Generation Nano Boost: 500%
			}

			Ashe
			{
				Coach Gun Cooldown Time: 50%
				Coach Gun Knockback Scalar Enemy: 300%
				Coach Gun Knockback Scalar Self: 300%
				Damage Dealt: 500%
				Dynamite Cooldown Time: 5%
				Dynamite Fuse Time Scalar: 10%
				Health: 70%
				Movement Speed: 250%
				No Ammunition Requirement: On
				Projectile Speed: 200%
				Quick Melee: Off
				Ultimate Duration: 200%
				Ultimate Generation - Combat B.O.B.: 450%
				Ultimate Generation - Passive B.O.B.: 350%
				Ultimate Generation B.O.B.: 10%
			}

			Baptiste
			{
				Damage Dealt: 250%
				Health: 500%
				Immortality Field Cooldown Time: 300%
				Infinite Ultimate Duration: On
				Movement Gravity: 60%
				Movement Speed: 120%
				No Ammunition Requirement: On
				Quick Melee: Off
				Regenerative Burst: Off
				Secondary Fire: Off
				Ultimate Generation - Combat Amplification Matrix: 200%
				Ultimate Generation - Passive Amplification Matrix: 200%
				Ultimate Generation Amplification Matrix: 200%
			}

			Bastion
			{
				Configuration: Tank Weapon Knockback Scalar: 400%
				Damage Dealt: 500%
				Healing Received: 80%
				Health: 400%
				Infinite Ultimate Duration: On
				Movement Speed: 85%
				Projectile Speed: 300%
				Quick Melee: Off
				Self-Repair: Off
				Ultimate Duration: 500%
				Ultimate Generation - Combat Configuration: Tank: 0%
				Ultimate Generation - Passive Configuration: Tank: 0%
				Ultimate Generation Configuration: Tank: 10%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 80%
				Barrier Shield Recharge Rate: 500%
				Damage Dealt: 275%
				Healing Received: 150%
				Movement Speed: 200%
				Quick Melee: Off
				Repair Pack: Off
				Shield Bash Cooldown Time: 0%
				Shield Bash Knockback Scalar: 300%
				Ultimate Generation - Combat Rally: 200%
				Ultimate Generation - Passive Rally: 200%
				Ultimate Generation Rally: 200%
				Whip Shot Cooldown Time: 0%
				Whip Shot Knockback Scalar: 300%
			}

			D.Va
			{
				Boosters Cooldown Time: 0%
				Boosters Knockback Scalar: 400%
				Call Mech Knockback Scalar: 400%
				Damage Dealt: 500%
				Defense Matrix Maximum Time: 500%
				Defense Matrix Recharge Rate: 0%
				Health: 10%
				Jump Vertical Speed: 200%
				Micro Missiles Cooldown Time: 0%
				Movement Speed: 200%
				Projectile Speed: 10%
				Quick Melee: Off
				Self Destruct Knockback Scalar: 200%
				Spawn With Ultimate Ready: On
				Ultimate Generation - Combat Self-Destruct: 500%
				Ultimate Generation - Passive Self-Destruct: 500%
				Ultimate Generation Self-Destruct: 500%
			}

			Doomfist
			{
				Damage Dealt: 500%
				Health: 40%
				Jump Vertical Speed: 200%
				Meteor Strike Knockback Scalar: 300%
				Movement Speed: 200%
				Quick Melee: Off
				Rising Uppercut Cooldown Time: 0%
				Rocket Punch Cooldown Time: 0%
				Seismic Slam Cooldown Time: 0%
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
			}

			Echo
			{
				Damage Dealt: 300%
				Flight: Off
				Focusing Beam: Off
				Health: 160%
				Jump Vertical Speed: 330%
				Movement Gravity: 90%
				No Ammunition Requirement: On
				Primary Fire: Off
				Projectile Speed: 170%
				Quick Melee: Off
				Sticky Bombs Cooldown Time: 0%
				Ultimate Ability Duplicate: Off
			}

			Genji
			{
				Damage Dealt: 250%
				Deflect Cooldown Time: 40%
				Health: 50%
				Jump Vertical Speed: 200%
				Movement Speed: 160%
				No Ammunition Requirement: On
				Projectile Speed: 30%
				Quick Melee: Off
				Swift Strike Cooldown Time: 0%
				Ultimate Duration: 500%
				Ultimate Generation - Combat Dragonblade: 300%
				Ultimate Generation - Passive Dragonblade: 200%
				Ultimate Generation Dragonblade: 200%
			}

			Hanzo
			{
				Damage Dealt: 500%
				Health: 10%
				Lunge Cooldown Time: 8%
				Lunge Distance Scalar: 200%
				Quick Melee: Off
				Sonic Arrow Cooldown Time: 25%
				Storm Arrows Cooldown Time: 30%
				Storm Arrows Quantity: 12
				Ultimate Generation - Combat Dragonstrike: 400%
				Ultimate Generation - Passive Dragonstrike: 300%
				Ultimate Generation Dragonstrike: 300%
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 10%
				Concussion Mine Knockback Scalar: 200%
				Damage Dealt: 500%
				Frag Launcher Knockback Scalar: 400%
				Infinite Ultimate Duration: On
				No Ammunition Requirement: On
				Projectile Speed: 325%
				Quick Melee: Off
				Spawn With Ultimate Ready: On
				Steel Trap Cooldown Time: 10%
				Ultimate Duration: 160%
			}

			LÃºcio
			{
				Amp It Up Cooldown Time: 20%
				Damage Dealt: 250%
				Damage Received: 80%
				Healing Received: 20%
				Health: 30%
				Movement Gravity: 80%
				Movement Speed: 300%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Quick Melee: Off
				Soundwave Cooldown Time: 5%
				Soundwave Knockback Scalar: 300%
				Spawn With Ultimate Ready: On
				Ultimate Generation - Combat Sound Barrier: 300%
				Ultimate Generation - Passive Sound Barrier: 300%
				Ultimate Generation Sound Barrier: 10%
			}

			McCree
			{
				Combat Roll Cooldown Time: 0%
				Damage Dealt: 220%
				Flashbang Cooldown Time: 30%
				Health: 150%
				Jump Vertical Speed: 200%
				No Ammunition Requirement: On
				Quick Melee: Off
				Ultimate Generation - Combat Deadeye: 350%
			}

			Mei
			{
				Ammunition Clip Size Scalar: 300%
				Blizzard Freeze Minimum: 35%
				Blizzard Freeze Rate Scalar: 500%
				Cryo-Freeze Cooldown Time: 50%
				Damage Dealt: 150%
				Freeze Stacking: On
				Health: 90%
				Ice Wall Cooldown Time: 0%
				Quick Melee: Off
				Spawn With Ultimate Ready: On
				Ultimate Generation - Combat Blizzard: 400%
				Ultimate Generation - Passive Blizzard: 200%
				Ultimate Generation Blizzard: 200%
				Weapon Freeze Duration Scalar: 40%
				Weapon Freeze Minimum: 20%
			}

			Mercy
			{
				Ammunition Clip Size Scalar: 250%
				Damage Dealt: 300%
				Damage Received: 35%
				Guardian Angel: Off
				Healing Dealt: 300%
				Healing Received: 300%
				Health: 110%
				Jump Vertical Speed: 150%
				Movement Gravity: 40%
				No Ammunition Requirement: On
				Projectile Speed: 250%
				Quick Melee: Off
				Resurrect: Off
				Ultimate Generation - Combat Valkyrie: 400%
				Ultimate Generation - Passive Valkyrie: 250%
				Ultimate Generation Valkyrie: 10%
				Weapons Enabled: Caduceus Blaster Only
			}

			Moira
			{
				Biotic Orb Cooldown Time: 0%
				Biotic Orb Max Damage Scalar: 200%
				Damage Dealt: 50%
				Fade Cooldown Time: 500%
				Healing Dealt: 60%
				Healing Received: 60%
				Infinite Ultimate Duration: On
				Primary Fire: Off
				Projectile Speed: 20%
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Coalescence: Off
				Ultimate Duration: 200%
			}

			Orisa
			{
				Fortify: Off
				Halt! Cooldown Time: 3%
				Healing Received: 120%
				Health: 500%
				Jump Vertical Speed: 25%
				Movement Gravity: 400%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Protective Barrier Cooldown Time: 40%
				Quick Melee: Off
				Ultimate Generation - Combat Supercharger: 500%
				Ultimate Generation - Passive Supercharger: 300%
				Ultimate Generation Supercharger: 300%
			}

			Pharah
			{
				Concussive Blast Cooldown Time: 0%
				Concussive Blast Knockback Scalar: 300%
				Damage Dealt: 250%
				Health: 10%
				Hover Jets Unlimited Fuel: On
				Jump Jet Acceleration Scalar: 300%
				Jump Jet Cooldown Time: 200%
				Jump Vertical Speed: 200%
				Movement Speed: 200%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Quick Melee: Off
			}

			Reaper
			{
				Ammunition Clip Size Scalar: 300%
				Damage Dealt: 500%
				Health: 30%
				Movement Gravity: 70%
				Movement Speed: 250%
				Quick Melee: Off
				Shadow Step Cooldown Time: 0%
				Spawn With Ultimate Ready: On
				Ultimate Generation - Combat Death Blossom: 300%
				Ultimate Generation - Passive Death Blossom: 300%
				Ultimate Generation Death Blossom: 410%
				Wraith Form Cooldown Time: 10%
			}

			Reinhardt
			{
				Barrier Field Cooldown Time: 30%
				Barrier Field Recharge Rate: 300%
				Charge Cooldown Time: 0%
				Charge Knockback Scalar: 300%
				Damage Dealt: 500%
				Fire Strike Cooldown Time: 10%
				Healing Received: 10%
				Health: 230%
				Movement Speed: 150%
				Projectile Speed: 500%
				Quick Melee: Off
				Rocket Hammer Knockback Scalar: 400%
				Spawn With Ultimate Ready: On
				Ultimate Generation - Combat Earthshatter: 200%
				Ultimate Generation - Passive Earthshatter: 125%
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 25%
				Damage Dealt: 200%
				Health: 190%
				Movement Speed: 200%
				No Ammunition Requirement: On
				Projectile Speed: 300%
				Quick Melee: Off
				Spawn With Ultimate Ready: On
				Take a Breather: Off
				Ultimate Generation Whole Hog: 110%
				Whole Hog Knockback Scalar: 300%
			}

			Sigma
			{
				Accretion Cooldown Time: 75%
				Accretion Knockback Scalar: 200%
				Damage Dealt: 500%
				Experimental Barrier Cooldown Time: 400%
				Healing Received: 10%
				Health: 400%
				Jump Vertical Speed: 90%
				Kinetic Grasp: Off
				Movement Speed: 85%
				Projectile Speed: 200%
				Quick Melee: Off
				Ultimate Generation - Combat Gravitic Flux: 350%
				Ultimate Generation - Passive Gravitic Flux: 350%
				Ultimate Generation Gravitic Flux: 10%
			}

			Soldier: 76
			{
				Ammunition Clip Size Scalar: 500%
				Biotic Field: Off
				Damage Dealt: 250%
				Healing Dealt: 70%
				Healing Received: 70%
				Health: 200%
				Helix Rockets Cooldown Time: 10%
				Helix Rockets Knockback Scalar: 400%
				Infinite Ultimate Duration: On
				Movement Speed: 155%
				Projectile Speed: 50%
				Quick Melee: Off
				Ultimate Duration: 500%
			}

			Sombra
			{
				Ammunition Clip Size Scalar: 150%
				Damage Dealt: 350%
				Hack Cooldown Time: 0%
				Health: 40%
				Movement Speed: 200%
				Projectile Speed: 500%
				Quick Melee: Off
				Stealth Cooldown Time: 120%
				Translocator Cooldown Time: 0%
				Ultimate Generation - Combat EMP: 200%
				Ultimate Generation - Passive EMP: 200%
			}

			Symmetra
			{
				Damage Dealt: 310%
				Health: 60%
				Projectile Speed: 500%
				Quick Melee: Off
				Sentry Turret Cooldown Time: 0%
				Ultimate Generation - Combat Photon Barrier: 300%
				Ultimate Generation - Passive Photon Barrier: 200%
				Ultimate Generation Photon Barrier: 150%
			}

			TorbjÃ¶rn
			{
				Ammunition Clip Size Scalar: 300%
				Damage Dealt: 200%
				Deploy Turret Cooldown Time: 0%
				Health: 150%
				Overload Cooldown Time: 25%
				Projectile Speed: 225%
				Quick Melee: Off
				Ultimate Duration: 200%
				Ultimate Generation - Combat Molten Core: 450%
				Ultimate Generation - Passive Molten Core: 350%
				Ultimate Generation Molten Core: 10%
			}

			Tracer
			{
				Blink Cooldown Time: 0%
				Damage Dealt: 400%
				Damage Received: 400%
				Healing Received: 15%
				Movement Speed: 300%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Quick Melee: Off
				Recall Cooldown Time: 30%
				Ultimate Generation - Passive Pulse Bomb: 500%
			}

			Widowmaker
			{
				Damage Dealt: 500%
				Grappling Hook Cooldown Time: 0%
				Health: 40%
				Jump Vertical Speed: 200%
				Movement Speed: 115%
				No Automatic Fire: On
				Projectile Speed: 500%
				Quick Melee: Off
				Spawn With Ultimate Ready: On
				Ultimate Duration: 80%
				Ultimate Generation - Combat Infra-Sight: 500%
				Ultimate Generation - Passive Infra-Sight: 500%
				Ultimate Generation Infra-Sight: 10%
				Venom Mine Cooldown Time: 0%
			}

			Winston
			{
				Barrier Projector Cooldown Time: 50%
				Damage Dealt: 250%
				Damage Received: 200%
				Health: 250%
				Jump Pack Cooldown Time: 0%
				Jump Pack Knockback Scalar: 400%
				Jump Vertical Speed: 220%
				No Ammunition Requirement: On
				Primal Rage Melee Knockback Scalar: 300%
				Quick Melee: Off
				Ultimate Duration: 300%
				Ultimate Generation - Combat Primal Rage: 150%
				Ultimate Generation - Passive Primal Rage: 150%
				Ultimate Generation Primal Rage: 200%
			}

			Wrecking Ball
			{
				Adaptive Shield: Off
				Damage Dealt: 250%
				Damage Received: 160%
				Grappling Claw Cooldown Time: 0%
				Grappling Claw Knockback Scalar: 400%
				Health: 80%
				Infinite Ultimate Duration: On
				Jump Vertical Speed: 500%
				Minefield Knockback Scalar: 400%
				Movement Gravity: 35%
				Movement Speed: 170%
				Piledriver Cooldown Time: 20%
				Primary Fire: Off
				Projectile Gravity: 300%
				Quick Melee: Off
				Roll Always Active: On
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
				Ultimate Generation - Combat Minefield: 300%
				Ultimate Generation - Passive Minefield: 350%
				Ultimate Generation Minefield: 10%
			}

			Zarya
			{
				Ammunition Clip Size Scalar: 500%
				Damage Dealt: 360%
				Healing Received: 10%
				Health: 400%
				Movement Speed: 85%
				No Ammunition Requirement: On
				Particle Barrier Cooldown Time: 40%
				Particle Cannon Secondary Knockback Scalar: 400%
				Projected Barrier: Off
				Projectile Speed: 500%
				Quick Melee: Off
				Ultimate Generation - Combat Graviton Surge: 450%
				Ultimate Generation - Passive Graviton Surge: 350%
				Ultimate Generation Graviton Surge: 10%
			}

			Zenyatta
			{
				Ammunition Clip Size Scalar: 25%
				Healing Dealt: 90%
				Healing Received: 10%
				Health: 60%
				Jump Vertical Speed: 300%
				Movement Gravity: 25%
				Orb of Harmony: Off
				Projectile Speed: 500%
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Generation - Combat Transcendence: 80%
				Ultimate Generation Transcendence: 10%
			}
		}
	}
}

variables
{
	global:
		0: Lava_Torbjorn_Activation
		1: Lava_HUD_Warning
		2: Lava_HUD_Warning_Timer
		3: Zarya_Ultimate_HUD
		4: Lava_Position
		5: Lava_Sizes
		6: Zarya_Ultimate_User
		8: Total_Level2_Bastion
		9: Lava_Rising_Array_Looper
		10: Total_Level2_Soldier76
		11: Total_Level2_Moira
		12: Total_Level2_Roadhog
		13: Total_Level2_Ana
		15: Lucio_Ultimate
		16: Zenyatta_Mind_Control
		17: Hook_Timer
		18: Zarya_Ultimate_Duration
		20: Speed_Force_Duration
		21: Speed_Force_Timer
		22: Speed_Force_Divider
		26: Lava_Event_Player
		27: Reinhardt_Divisions
		28: Reinhardt_Radius
		29: Sigma_Ulting
		30: Sigma_Player_Ulting
		31: Lava_Effect_id
		32: TorbLogHelper
		33: SIGMA_ULT_HUD
		34: Sigma_Test
		35: LucioUltPlayer
		36: Debug
		37: ZaryaUltReset
		38: ZaryaStartMoving
		39: TracerSpeedForcePlayer
		40: Total_Level2_Orisa

	player:
		0: Soldier76_Power
		1: Bastion_Power
		2: HUD_Text_Start_Game_1
		4: Soldier76_Level2_Icon
		5: Echo_Immunity
		6: Bastion_Level2_Icon
		7: Roadhog_Level2_Icon
		8: Orisa_Power_Icon
		9: Moira_Power
		10: Moira_Level2_Icon
		11: Lava_Activated_Player
		12: Lava_Protection_Text
		14: Orisa_Power
		15: Orisa_Kill_Warning_HUD
		16: Tracer_Speed_Force
		17: Roadhog_Power
		18: Roadhog_Hook_Timer
		19: Tracer_Power
		21: Moira_Explanation
		22: Doomfist_HUD_Text_1
		23: Roadhog_Hook
		24: HUD_Text_Ana_Poison_Effect
		25: HUD_Text_Ana_Poison_Warning
		26: Mercy_Ultimate
		27: HUD_Text_1
		28: HUD_Text_2
		29: HUD_Text_Warning
		30: Genji_Ultimate_Effect
		31: Hanzo_Ultimate
		32: Doomfist_HUD_Text_2
		33: Bastion_Ultimate_Effect
		34: Dva_HUD_Text_1
		35: Dva_HUD_Text_2
		36: Zenyatta_Power
		37: Junkrat_Burning_Immunity
		38: Ana_Level2
		39: ClosestJunkrat
		40: Ana_Level2_Icon
		41: Ana_Level2_Warning_HUD
		42: Soldier76_Level2_Warning_HUD
		43: Bastion_Level2_Warning_HUD
		44: Roadhog_Level2_Warning_HUD
		45: Moira_Level2_Warning_HUD
		46: Sigma_Ult_Player_Max_Height
		47: Torb_Hud_Text5
		48: Hud_Text_3
		49: Ashe_Immunity
		50: Ana_Immunity
		51: Zarya_Ultimate_Warning_HUD
		52: Orisa_Level2_Ultimate_HUD
		53: Widowmaker_ThirdEye
		54: Zenyatta_MindControl_Warning_HUD
		55: Orisa_Level2
		56: Orisa_Level2_Warning_HUD
		57: Orisa_Level2_Icon
		58: Orisa_Power_Level2
		59: Roadhog_Level2
		60: Ana_death_sleep
		61: Ana_Sleep_Poison_Hud
		62: sigmair
		63: Lava_Event_Lava_King_Icon
		64: Lava_Protection_God_Text
		65: Torb_Hud_text3
		66: Torb_Hud_text4
		67: Rein_Circle_White_Entity_Array
		68: Rein_Circle_Red_Entity_Array
		69: Reinhardt_Ring_Counter
		70: Super_Punch_Cooldown
		71: Reinhardt_Player_Pos
		74: Sigma_Ult_Player_Max_Speed
		75: Sigma_Ult_Player_Max_Height_Temp
		76: ZaryaUltSound
		77: HostServerLoad
		79: Hud_Text_4
		80: Ashe_Bob_Out
		81: Widow_Warning_HUD
		82: Widow_Sights_Icon
		83: Junkrat_Burn_Warning
		84: Ashe_Bob_Invis
		85: SigmaUltPlayerArray
		86: Tracer_Health_Pack_Heals
		87: Trace_Space_Force_Started
		88: Tracer_HuD_Interact
		89: Trader_Hud_SP_Active
		90: Tracer_Hud_SP_Others
		91: Wrecking_Ball_Ultimate_Counter
		92: ReinShouldStart
		93: ReinHasBeenHit
		94: ReinShatterArray
		95: TorbLavaGodArmor
		96: PlayerSelfRespawnCount
		97: MoiraBallSpamTest
		98: DebugPos
		99: SigmaArrayCounter
		100: ZayraUltIsCharged
		101: ZayraHealthPoolMod
		102: ZayraUltHud
		103: HeroesAllowed
		104: ZaryaBlackHoleEffect
		105: LucioUltPlayerPos
		106: LucioNearByArray
		107: HudFiller1
		108: HudFiller2
		109: HudFiller3
}

subroutines
{
	0: Player_Reset
	1: HeroSelection
}

disabled rule("Enable Debug")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Debug = True;
	}
}

rule("General | Bug Fix")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Debug != True;
	}

	actions
	{
		Allow Button(Event Player, Button(Interact));
		Set Projectile Speed(Event Player, 100);
		Wait(1, Ignore Condition);
		Loop;
	}
}

rule("General | Global Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Lava_Position = Empty Array;
		Global.Lava_Sizes = Empty Array;
		Global.Z = Empty Array;
		Global.Hook_Timer = 7;
		Global.Zarya_Ultimate_Duration = 10;
		Global.Speed_Force_Duration = 10;
		Global.Speed_Force_Divider = 5;
		Global.ZaryaUltReset = True;
		Global.TracerSpeedForcePlayer = 0;
	}
}

rule("General | Player Reset at Death")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		disabled (Is Game In Progress == True || Current Game Mode == Game Mode(Skirmish)) == True;
		Is Dead(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		If(Event Player == Global.Zarya_Ultimate_User);
			Destroy Effect(Event Player.ZaryaBlackHoleEffect);
			Log To Inspector(Custom String("{0}{1} - Ult clean up run", Event Player, Hero Of(Event Player)));
			Stop Accelerating(Remove From Array(All Players(All Teams), Event Player));
			Set Ability Cooldown(Event Player, Button(Ability 1), 5);
			Stop Forcing Throttle(Remove From Array(All Players(All Teams), Event Player));
			Set Gravity(Remove From Array(All Players(All Teams), Event Player), 100);
			Event Player.ZayraUltIsCharged = False;
			Remove Health Pool From Player(Event Player.ZayraHealthPoolMod);
			Destroy HUD Text(Event Player.ZayraUltHud);
			Global.ZaryaUltReset = True;
			disabled Stop Accelerating(Remove From Array(All Players(All Teams), Event Player));
			disabled Stop Forcing Throttle(Remove From Array(All Players(All Teams), Event Player));
			disabled Set Gravity(Remove From Array(All Players(All Teams), Event Player), 100);
			Destroy HUD Text(Event Player.ZayraUltHud);
			Global.Zarya_Ultimate_User = False;
		End;
		If(Event Player == Global.Lava_Event_Player);
			Log To Inspector(Custom String("{0}{1} - Ult clean up run", Event Player, Hero Of(Event Player)));
			Destroy Icon(Event Player.Lava_Event_Lava_King_Icon);
			Set Move Speed(Event Player, 100);
			Global.Lava_Event_Player = Null;
			Event Player.Lava_Event_Lava_King_Icon = Null;
			Destroy Icon(Global.Lava_Event_Player.Lava_Event_Lava_King_Icon);
		End;
		If(Event Player == Global.Sigma_Player_Ulting);
			Set Gravity(All Players(All Teams), 100);
			Destroy HUD Text(Global.SIGMA_ULT_HUD);
			Set Move Speed(All Players(All Teams), 100);
			Global.Sigma_Player_Ulting = Null;
			Global.Sigma_Test = False;
			Log To Inspector(Custom String("{0}{1} - Ult clean up run", Event Player, Hero Of(Event Player)));
			Global.Sigma_Ulting = False;
		End;
		disabled Event Player.ZayraUltIsCharged = False;
		If(Event Player == Global.TracerSpeedForcePlayer);
			Set Slow Motion(100);
			Log To Inspector(Custom String("HALP"));
			Global.TracerSpeedForcePlayer = 0;
			Log To Inspector(Custom String("{0}{1} - Ult clean up run", Event Player, Hero Of(Event Player)));
		End;
		Call Subroutine(Player_Reset);
	}
}

rule("Lava Loader")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(Global.Lava_Torbjorn_Activation == 1000 ? All Players(All Teams) : Null, Sphere, Color(Red),
			Global.Lava_Position[Global.Lava_Rising_Array_Looper], Global.Lava_Sizes[Global.Lava_Rising_Array_Looper],
			Visible To Position and Radius);
	}
}

rule("General | Player Left Game")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		disabled Is Dead(Event Player) == True;
	}

	actions
	{
		If(Event Player == Global.Zarya_Ultimate_User);
			Destroy Effect(Event Player.ZaryaBlackHoleEffect);
			disabled Stop Accelerating(Remove From Array(All Players(All Teams), Event Player));
			Stop Accelerating(Remove From Array(All Players(All Teams), Event Player));
			Stop Forcing Throttle(Remove From Array(All Players(All Teams), Event Player));
			Set Gravity(Remove From Array(All Players(All Teams), Event Player), 100);
			Event Player.ZayraUltIsCharged = False;
			Remove Health Pool From Player(Event Player.ZayraHealthPoolMod);
			Destroy HUD Text(Event Player.ZayraUltHud);
			Global.ZaryaUltReset = True;
			disabled Stop Forcing Throttle(Remove From Array(All Players(All Teams), Event Player));
			disabled Set Gravity(Remove From Array(All Players(All Teams), Event Player), 100);
			Global.Zarya_Ultimate_User = False;
			Destroy HUD Text(Global.Zarya_Ultimate_HUD);
		End;
		If(Event Player == Global.Lava_Event_Player);
			Destroy Icon(Event Player.Lava_Event_Lava_King_Icon);
			Global.Lava_Event_Player = Null;
			Event Player.Lava_Event_Lava_King_Icon = Null;
		End;
		If(Event Player == Global.Sigma_Player_Ulting);
			Global.Sigma_Player_Ulting = Null;
			Global.Sigma_Ulting = False;
			Set Gravity(All Players(All Teams), 100);
			Destroy HUD Text(Global.SIGMA_ULT_HUD);
			Set Move Speed(All Players(All Teams), 100);
		End;
		If(Event Player == Global.TracerSpeedForcePlayer);
			Set Slow Motion(100);
			Log To Inspector(Custom String("HALP"));
			Global.TracerSpeedForcePlayer = 0;
		End;
		Call Subroutine(Player_Reset);
		disabled Set Ability Cooldown(Event Player, Button(Ability 1), 5);
	}
}

rule("General | Subroutine | Player Reset")
{
	event
	{
		Subroutine;
		Player_Reset;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100);
		Enable Movement Collision With Environment(Event Player);
		Set Max Health(Event Player, 100);
		Destroy HUD Text(Event Player.Zenyatta_MindControl_Warning_HUD);
		Set Damage Received(Event Player, 100);
		Set Projectile Gravity(Event Player, 100);
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Set Gravity(Event Player, 100);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Interact));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Clear Status(Event Player, Phased Out);
		Set Invisible(Event Player, None);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Rooted);
		Clear Status(Event Player, Burning);
		Clear Status(Event Player, Invincible);
		Clear Status(Event Player, Unkillable);
		Event Player.Orisa_Power = 0;
		Event Player.Orisa_Power_Level2 = 0;
		Event Player.Orisa_Level2_Ultimate_HUD = 0;
		Set Ultimate Ability Enabled(Event Player, True);
		disabled Set Ultimate Charge(Event Player, 0);
		Event Player.Lava_Activated_Player = 0;
		Event Player.Tracer_Speed_Force = 0;
		Event Player.Tracer_Speed_Force = False;
		disabled Destroy Icon(Last Created Entity);
		Destroy Icon(Event Player.Orisa_Power_Icon);
		disabled If(Last Created Entity != Global.Lava_Effect_id);
		disabled Log To Inspector(Custom String("Destorying Lava {0} - Last Entity {1} Lava Id {2}", Event Player, Last Created Entity,
			Global.Lava_Effect_id));
		disabled Destroy Effect(Last Created Entity);
		Clear Status(Event Player, Hacked);
		disabled End;
		Destroy Effect(Event Player.Genji_Ultimate_Effect);
		Destroy Effect(Event Player.Bastion_Ultimate_Effect);
		Stop Damage Modification(Event Player.Ana_Immunity);
		Stop Damage Modification(Event Player.Ashe_Immunity);
		Stop Damage Modification(Event Player.Echo_Immunity);
		Destroy HUD Text(Event Player.HUD_Text_Warning);
		Destroy HUD Text(Event Player.Orisa_Kill_Warning_HUD);
		Destroy HUD Text(Event Player.HUD_Text_Ana_Poison_Effect);
		Destroy HUD Text(Event Player.HUD_Text_Ana_Poison_Warning);
		Destroy HUD Text(Event Player.Lava_Protection_Text);
		Destroy HUD Text(Event Player.Moira_Explanation);
		Stop Damage Over Time(Last Damage Over Time ID);
		Destroy HUD Text(Event Player.Doomfist_HUD_Text_1);
		Destroy HUD Text(Event Player.Doomfist_HUD_Text_2);
		Destroy HUD Text(Event Player.Dva_HUD_Text_1);
		Destroy HUD Text(Event Player.Dva_HUD_Text_2);
		Destroy HUD Text(Event Player.Ana_Level2_Warning_HUD);
		Destroy HUD Text(Event Player.Orisa_Level2_Ultimate_HUD);
		Destroy HUD Text(Event Player.Orisa_Level2_Warning_HUD);
		Destroy HUD Text(Event Player.Soldier76_Level2_Warning_HUD);
		Destroy Icon(Event Player.Widow_Sights_Icon);
		Event Player.Widow_Sights_Icon = Null;
		Destroy HUD Text(Event Player.Bastion_Level2_Warning_HUD);
		Destroy HUD Text(Event Player.Roadhog_Level2_Warning_HUD);
		Destroy HUD Text(Event Player.Moira_Level2_Warning_HUD);
		Destroy HUD Text(Event Player.Ana_Level2_Warning_HUD);
		Destroy HUD Text(Event Player.HUD_Text_1);
		Event Player.Ana_death_sleep = False;
		Destroy HUD Text(Event Player.Ana_Sleep_Poison_Hud);
		Destroy HUD Text(Event Player.Torb_Hud_text4);
		Event Player.Sigma_Ult_Player_Max_Height_Temp = 0;
		Event Player.Sigma_Ult_Player_Max_Height = Null;
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.Torb_Hud_text4);
		Destroy HUD Text(Event Player.Hud_Text_4);
		Event Player.Tracer_Speed_Force = 0;
		Destroy HUD Text(Event Player.Torb_Hud_text3);
		Destroy HUD Text(Event Player.Torb_Hud_text4);
		Destroy HUD Text(Event Player.Torb_Hud_Text5);
		Destroy HUD Text(Event Player.Junkrat_Burn_Warning);
		Destroy HUD Text(Event Player.Ashe_Bob_Invis);
		Destroy HUD Text(Event Player.Ashe_Bob_Out);
		Stop Scaling Player(Event Player);
		Destroy HUD Text(Event Player.Tracer_HuD_Interact);
		Destroy HUD Text(Event Player.Trader_Hud_SP_Active);
		Stop Scaling Barriers(Event Player);
		Destroy HUD Text(Event Player.Hud_Text_3);
		Remove All Health Pools From Player(Event Player);
		Remove Health Pool From Player(Event Player.TorbLavaGodArmor);
		Destroy HUD Text(Event Player.Widow_Warning_HUD);
		Destroy HUD Text(Event Player.Lava_Protection_God_Text);
		Destroy HUD Text(Event Player.HUD_Text_Ana_Poison_Warning);
		Stop Forcing Player Outlines(Event Player, All Players(All Teams));
		Destroy HUD Text(Event Player.Torb_Hud_text3);
		Event Player.Tracer_Health_Pack_Heals = 0;
		Wait(3, Ignore Condition);
		Destroy HUD Text(Event Player.HudFiller1);
		Destroy HUD Text(Event Player.HudFiller2);
		Destroy HUD Text(Event Player.HudFiller3);
		disabled Set Ability 2 Enabled(Event Player, True);
		If(Global.Debug != True);
			Set Player Allowed Heroes(Event Player, Random Value In Array(All Heroes));
			disabled Call Subroutine(HeroSelection);
		End;
		disabled Event Player.HeroesAllowed = Random Value In Array(All Heroes);
	}
}

rule("Global - HUD Spacing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String(""), Custom String(""), Custom String("   "), Left, -1, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.HudFiller1 = Last Created Entity;
		Create HUD Text(Event Player, Custom String(""), Custom String(""), Custom String("   "), Left, -1, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.HudFiller2 = Last Created Entity;
		Create HUD Text(Event Player, Custom String(""), Custom String(""), Custom String("   "), Left, -1, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.HudFiller3 = Last Created Entity;
	}
}

rule("General | HUD Text Level 2's")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Total_Level2_Orisa = 0;
		Global.Speed_Force_Timer = 0;
		Global.Total_Level2_Ana = 0;
		Global.Total_Level2_Bastion = 0;
		Global.Total_Level2_Soldier76 = 0;
		Global.Total_Level2_Moira = 0;
		Global.Total_Level2_Roadhog = 0;
		Create HUD Text(All Players(All Teams), Custom String("Total Level 2:"), Null, Null, Right, 1, Color(Orange), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Bastion)), Global.Total_Level2_Bastion, Null, Right, 2, Color(
			Orange), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Roadhog)), Global.Total_Level2_Roadhog, Null, Right, 2, Color(
			Orange), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Soldier: 76)), Global.Total_Level2_Soldier76, Null, Right, 2, Color(
			Orange), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Moira)), Global.Total_Level2_Moira, Null, Right, 2, Color(Orange),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Ana)), Global.Total_Level2_Ana, Null, Right, 2, Color(Orange), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Orisa)), Global.Total_Level2_Orisa, Null, Right, 2, Color(Orange),
			Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("General | Server Stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Host Player == Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HostServerLoad);
		Create HUD Text(Event Player, Null, Null, Custom String("Server Load:{0} Average:{1} Peak:{2}", Server Load, Server Load Average,
			Server Load Peak), Right, 15, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HostServerLoad = Last Created Entity;
	}
}

rule("General | Armor Buff for low health heroes")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Array Contains(Array(Hero(Widowmaker), Hero(Genji), Hero(Reaper), Hero(Pharah), Hero(Ashe), Hero(Hanzo)), Hero Of(Event Player))
			== True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Armor, 50, False, True);
	}
}

rule("General | Give some heroes head starts for ULT")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Array Contains(Array(Hero(Ashe), Hero(Mercy), Hero(TorbjÃ¶rn), Hero(Sigma), Hero(Zarya)), Hero Of(Event Player)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		If(Hero Of(Event Player) == Hero(Mercy));
			Set Ultimate Charge(Event Player, 55);
		Else;
			Set Ultimate Charge(Event Player, 65);
		End;
	}
}

rule("General | Lava King")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Is Alive(Event Player) == True;
		(Event Player == Global.Lava_Event_Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("YOU ARE THE LAVA GOD. STAND IN THE RISING LAVA FOR PROTECTION"), Custom String(
			"(NOT THE ONE FROM YOUR GUN)"), Custom String("God Reign Ends in:{0}", Global.Lava_HUD_Warning_Timer), Top, 2, Color(Orange),
			Color(Orange), Color(White), Visible To and String, Default Visibility);
		Event Player.Lava_Protection_God_Text = Last Text ID;
		Event Player.Lava_Activated_Player = 6;
		Wait Until(Event Player != Global.Lava_Event_Player, 99999);
		Clear Status(Event Player, Invincible);
		Destroy HUD Text(Event Player.Lava_Protection_God_Text);
		Create HUD Text(Event Player, Custom String("YOU ARE NO LONGER THE LAVA GOD. GET OUT OF THE LAVA YOU FOOL!"), Null, Null, Top, 2,
			Color(Orange), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Event Player.Lava_Protection_God_Text = Last Text ID;
		Wait(3, Ignore Condition);
		Destroy HUD Text(Event Player.Lava_Protection_God_Text);
		Destroy Icon(Event Player.Lava_Event_Lava_King_Icon);
		Event Player.Lava_Event_Lava_King_Icon = Null;
		Remove Health Pool From Player(Event Player.TorbLavaGodArmor);
	}
}

rule("General | Lava Spawning Player 6 Seconds Protected")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Is Alive(Event Player) == True;
		(Event Player != Global.Lava_Event_Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Protected from lava for 6 seconds"), Event Player.Lava_Activated_Player, Null, Top, 2,
			Color(Orange), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Event Player.Lava_Protection_Text = Last Text ID;
		Event Player.Lava_Activated_Player = 6;
		Wait(6, Ignore Condition);
		Destroy HUD Text(Event Player.Lava_Protection_Text);
	}
}

rule("General | Lava Spawning Player 6 Seconds Protected | Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Lava_Activated_Player > 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Lava_Activated_Player -= 1;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Doomfist")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} FIST THE WORLD", Null, Hero Icon String(Hero(Doomfist))), Null, Null, Left, 1,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Doomfist | Ultimate ON")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Allow Button(Event Player, Button(Primary Fire));
	}
}

rule("... Doomfist | Ultimate OFF")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
	}
}

rule("D.Va")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Low health, Big Damage, Spam Ultimate", Null, Hero Icon String(Hero(D.Va))), Null,
			Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("Symmetra")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Your wall cannot be \r\n walked through by most enemies", Null, Hero Icon String(
			Hero(Symmetra))), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Fly little robots... FLY!"), Custom String(""), Null, Left, 2, Color(Blue), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
	}
}

rule("... Symmetra | Ultimate 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Symmetra);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.Roadhog_Power = Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player)));
		Event Player.Roadhog_Hook_Timer = Facing Direction Of(Event Player);
	}
}

rule("... Symmetra | Ultimate 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Symmetra);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(0.050, Ignore Condition);
		Apply Impulse(Filtered Array(All Players(All Teams), (X Component Of(Event Player.Roadhog_Power + Event Player.Roadhog_Hook_Timer)
			- X Component Of(Event Player.Roadhog_Power)) * (Z Component Of(Position Of(Current Array Element)) - Z Component Of(
			Event Player.Roadhog_Power)) - (X Component Of(Position Of(Current Array Element)) - X Component Of(
			Event Player.Roadhog_Power)) * (Z Component Of(Event Player.Roadhog_Power + Event Player.Roadhog_Hook_Timer) - Z Component Of(
			Event Player.Roadhog_Power)) < 1 && (X Component Of(Event Player.Roadhog_Power + Event Player.Roadhog_Hook_Timer)
			- X Component Of(Event Player.Roadhog_Power)) * (Z Component Of(Position Of(Current Array Element)) - Z Component Of(
			Event Player.Roadhog_Power)) - (X Component Of(Position Of(Current Array Element)) - X Component Of(
			Event Player.Roadhog_Power)) * (Z Component Of(Event Player.Roadhog_Power + Event Player.Roadhog_Hook_Timer) - Z Component Of(
			Event Player.Roadhog_Power)) > 0), Vector(Z Component Of(Event Player.Roadhog_Hook_Timer) * -1, 0, X Component Of(
			Event Player.Roadhog_Hook_Timer) * 1), 14, To World, Cancel Contrary Motion);
		Apply Impulse(Filtered Array(All Players(All Teams), (X Component Of(Event Player.Roadhog_Power + Event Player.Roadhog_Hook_Timer)
			- X Component Of(Event Player.Roadhog_Power)) * (Z Component Of(Position Of(Current Array Element)) - Z Component Of(
			Event Player.Roadhog_Power)) - (X Component Of(Position Of(Current Array Element)) - X Component Of(
			Event Player.Roadhog_Power)) * (Z Component Of(Event Player.Roadhog_Power + Event Player.Roadhog_Hook_Timer) - Z Component Of(
			Event Player.Roadhog_Power)) < 0 && (X Component Of(Event Player.Roadhog_Power + Event Player.Roadhog_Hook_Timer)
			- X Component Of(Event Player.Roadhog_Power)) * (Z Component Of(Position Of(Current Array Element)) - Z Component Of(
			Event Player.Roadhog_Power)) - (X Component Of(Position Of(Current Array Element)) - X Component Of(
			Event Player.Roadhog_Power)) * (Z Component Of(Event Player.Roadhog_Power + Event Player.Roadhog_Hook_Timer) - Z Component Of(
			Event Player.Roadhog_Power)) > -1), Vector(Z Component Of(Event Player.Roadhog_Hook_Timer) * 1, 0, X Component Of(
			Event Player.Roadhog_Hook_Timer) * -1), 14, To World, Cancel Contrary Motion);
		Loop If Condition Is True;
	}
}

rule("... Symmetra | Ultimate 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Symmetra);
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Ultimate));
		Wait(0.018, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		Wait(0.080, Ignore Condition);
		Allow Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Ultimate));
		Wait(0.018, Ignore Condition);
		Disallow Button(Event Player, Button(Ultimate));
		Wait(0.080, Ignore Condition);
		Allow Button(Event Player, Button(Primary Fire));
		Press Button(Event Player, Button(Primary Fire));
	}
}

rule("Hanzo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Spam jump for air jumping", Null, Hero Icon String(Hero(Hanzo))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Hanzo | Ultimate Spam")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Hanzo);
		Is Using Ultimate(Event Player) == True;
		Event Player.HUD_Text_Ana_Poison_Warning != True;
	}

	actions
	{
		Big Message(Event Player, Custom String("Dragon!"));
		Event Player.Hanzo_Ultimate += 2.200;
		Event Player.Moira_Explanation = 100;
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(1.200, Ignore Condition);
		Set Status(Event Player, Null, Knocked Down, 0.001);
		Wait(0.010, Ignore Condition);
		Loop If(Event Player.Hanzo_Ultimate < 10);
		Event Player.Moira_Explanation = 0;
		Event Player.Hanzo_Ultimate = 0;
		Big Message(Event Player, Custom String("That was the Dragon Festival!"));
	}
}

rule("Mercy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Fast healing", Null, Hero Icon String(Hero(Mercy))), Null, Null, Left, 1, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Ultimate = Become A Burning Sun"), Custom String(""), Null, Left, 2, Color(Blue),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
	}
}

rule("... Mercy | Ultimate Warning")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{1} Hide from {0}'s Sun! She cannot be killed!", Event Player,
			Hero Icon String(Hero(Mercy))), Custom String(""), Null, Top, 1, Color(Red), Color(Red), Color(White), Visible To and String,
			Default Visibility);
		Event Player.HUD_Text_Warning = Last Text ID;
		Wait(16, Ignore Condition);
		Destroy HUD Text(Event Player.HUD_Text_Warning);
	}
}

rule("... Mercy | Ultimate Becomes Burning Sun")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 0);
		Set Status(Event Player, Event Player, Invincible, 9999);
		Event Player.Mercy_Ultimate = Players Within Radius(Position Of(Event Player), 150, Opposite Team Of(Team Of(Event Player)),
			Surfaces And Enemy Barriers);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Position Of(Event Player) + Up * 1.200, 10);
		Damage(Event Player.Mercy_Ultimate, Event Player, 5);
		Set Status(Event Player.Mercy_Ultimate, Null, Burning, 1);
		Wait(0.033, Ignore Condition);
		Loop If Condition Is True;
		Clear Status(Event Player, Invincible);
		Event Player.Mercy_Ultimate = 0;
		Set Move Speed(Event Player, 100);
	}
}

rule("Moira | Base")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Moira_Power < 2000;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.Hud_Text_3);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Starts weak, but stronger each second!", Null, Hero Icon String(Hero(Moira))),
			Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Level 2 @ 2000 Damaging Power"), Event Player.Moira_Power, Null, Left, 2, Color(
			Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Custom String("<- Moira's DMG done is equal to her Damaging Power"), Custom String(""), Null, Top, 2,
			Color(Orange), Color(Red), Color(White), Visible To and String, Default Visibility);
		Event Player.Moira_Explanation = Last Text ID;
		disabled Create HUD Text(Event Player, Custom String(""), Custom String(
			"1.Hold primary fire to shoot healing orbs when orb spam is active"), Null, Left, 3, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Event Player.Hud_Text_3 = Last Text ID;
		Wait(5, Ignore Condition);
		Destroy HUD Text(Event Player.Moira_Explanation);
	}
}

rule("Moira Cooldown 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		If(Event Player.Moira_Power < 500);
			Set Ability Cooldown(Event Player, Button(Ability 1), 1);
		End;
		If(Event Player.Moira_Power >= 500 && Event Player.Moira_Power <= 1000);
			Set Ability Cooldown(Event Player, Button(Ability 1), 1);
		End;
		If(Event Player.Moira_Power >= 1000 && Event Player.Moira_Power <= 2000);
			Set Ability Cooldown(Event Player, Button(Ability 1), 6);
		End;
		If(Event Player.Moira_Power >= 2000 && True);
			Set Ability Cooldown(Event Player, Button(Ability 1), 30);
		End;
	}
}

disabled rule("... Moira | Spam | Disable if obnoxious")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ability 2(Event Player) == True;
		disabled Event Player.Moira_Power < 2000;
	}

	actions
	{
		disabled Set Projectile Speed(Event Player, 500);
		disabled For Player Variable(Event Player, MoiraBallSpamTest, 0, 10, 1);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		disabled Wait(0.250, Ignore Condition);
		disabled End;
		Loop If Condition Is True;
	}
}

rule("... Moira | Level 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Moira_Power >= 2000;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Moira))), Event Player.Moira_Power, Null,
			Left, 2, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
	}
}

rule("... Moira | Balls Different Speed | Base")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ability 2(Event Player) == True;
		Event Player.Moira_Power < 2000;
	}

	actions
	{
		Set Projectile Speed(All Players(All Teams), Random Integer(0, 300));
	}
}

rule("... Moira | Balls Different Speed | Level 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ability 2(Event Player) == True;
		Event Player.Moira_Power >= 2000;
	}

	actions
	{
		Set Projectile Speed(All Players(All Teams), Random Integer(250, 500));
	}
}

rule("... Moira | Moira Gets Stronger Over Time")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Moira_Power += 10;
		Wait(1, Ignore Condition);
		Set Damage Dealt(Event Player, Event Player.Moira_Power);
		Loop If Condition Is True;
	}
}

rule("... Moira | Objective 500")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.Moira_Power == 500;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{1} {0} is gaining in DMG Done each second. Don't let her live long!",
			Event Player, Hero Icon String(Hero(Moira))), Custom String(""), Null, Top, 2, Color(Red), Color(Red), Color(White),
			Visible To and String, Default Visibility);
		Event Player.HUD_Text_Warning = Last Text ID;
		disabled Set Max Health(Event Player, 75);
		Wait(5, Ignore Condition);
		Destroy HUD Text(Event Player.HUD_Text_Warning);
	}
}

rule("... Moira | Objective 1000")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.Moira_Power == 1000;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{1} {0}'s DMG Done now above 1000! (level up at 2000)", Event Player,
			Hero Icon String(Hero(Moira))), Custom String(""), Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String,
			Default Visibility);
		Event Player.HUD_Text_Warning = Last Text ID;
		disabled Set Max Health(Event Player, 50);
		Wait(5, Ignore Condition);
		Destroy HUD Text(Event Player.HUD_Text_Warning);
	}
}

rule("... Moira | Objective 1500")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.Moira_Power == 1500;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{1} {0}'s DMG done is now 1500! (level up at 2000)", Event Player,
			Hero Icon String(Hero(Moira))), Custom String(""), Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String,
			Default Visibility);
		Event Player.HUD_Text_Warning = Last Text ID;
		disabled Set Max Health(Event Player, 25);
		Wait(5, Ignore Condition);
		Destroy HUD Text(Event Player.HUD_Text_Warning);
	}
}

rule("... Moira | Objective 2000")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.Moira_Power == 2000;
	}

	actions
	{
		Global.Total_Level2_Moira += 1;
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.HUD_Text_Warning);
		Create HUD Text(All Players(All Teams), Custom String("{1} Too late! {0}'s Moira is now level 2! Dmg hacks you for 3 sec",
			Event Player, Hero Icon String(Hero(Moira))), Custom String(""), Null, Top, 2, Color(Turquoise), Color(Red), Color(White),
			Visible To and String, Default Visibility);
		Event Player.HUD_Text_Warning = Last Text ID;
		Create HUD Text(Event Player, Hero Icon String(Hero(Moira)), Custom String("Level 2"), Null, Left, 8, Color(Purple), Color(Purple),
			Color(White), Visible To and String, Default Visibility);
		Event Player.Moira_Level2_Icon = Last Text ID;
		Wait(5, Ignore Condition);
		Destroy HUD Text(Event Player.HUD_Text_Warning);
	}
}

rule("... Moira | Damage Hacks")
{
	event
	{
		Player Dealt Damage;
		All;
		Moira;
	}

	conditions
	{
		Event Player.Moira_Power > 2000;
	}

	actions
	{
		Set Status(Victim, Event Player, Hacked, 3);
	}
}

rule("Sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.Hud_Text_3);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Ultimate hacks everyone", Null, Hero Icon String(Hero(Sombra))), Null, Null, Left,
			1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("And reduces everyones \r\nultimate charge to 0%"), Custom String(""), Null, Left, 2,
			Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Custom String(""), Custom String("1. Shooting auto hacks target"), Null, Left, 3, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Hud_Text_3 = Last Text ID;
	}
}

rule("... Sombra | Damage does hacks")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Sombra);
	}

	actions
	{
		Set Status(Event Player, Attacker, Hacked, 1);
	}
}

rule("... Sombra | The Ultimate Hack")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sombra);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{1} {0} hacked the system!", Event Player, Hero Icon String(Hero(Sombra))));
		Set Ultimate Charge(All Living Players(All Teams), 0);
		Set Status(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Event Player, Hacked, 7);
		Clear Status(Event Player, Hacked);
	}
}

rule("Ashe")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.Hud_Text_4);
		Destroy HUD Text(Event Player.Hud_Text_3);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} ULT = Invisible while Bob is alive", Null, Hero Icon String(Hero(Ashe))),
			Custom String(""), Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Start Damage Modification(Event Player, Event Player, 0, None);
		Event Player.Ashe_Immunity = Last Damage Modification ID;
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Null, Custom String("1. Unlimited Ammo"), Null, Left, 2, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Custom String(""), Custom String("2. 200% Bob Duration"), Null, Left, 3, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.Hud_Text_3 = Last Text ID;
		Create HUD Text(Event Player, Custom String(""), Custom String("3. Unlimited Dynamite/Immune to it's damage "), Null, Left, 4,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Hud_Text_4 = Last Text ID;
	}
}

rule("...Ashe | Invisible While Bob is out")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.Ashe_Bob_Out);
		Destroy HUD Text(Event Player.Ashe_Bob_Invis);
		Set Invisible(Event Player, Enemies);
		Set Ultimate Charge(Event Player, 0);
		Create HUD Text(Event Player, Custom String("Bob is alive! You are currently invisible. ", Event Player, Hero Icon String(Hero(
			Ashe)), Ability Icon String(Hero(Ashe), Button(Ultimate))), Null, Null, Top, 2, Color(Turquoise), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.Ashe_Bob_Invis = Last Text ID;
		Set Ultimate Ability Enabled(Event Player, False);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String(
			"{1} {0} is invisible while Bob is alive. Kill Bob! {2}", Event Player, Hero Icon String(Hero(Ashe)), Ability Icon String(Hero(
			Ashe), Button(Ultimate))), Null, Null, Top, 2, Color(Turquoise), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.Ashe_Bob_Out = Last Text ID;
		Wait(10, Ignore Condition);
		Destroy HUD Text(Event Player.Ashe_Bob_Out);
	}
}

rule("...Ashe | Bob is not out")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Destroy HUD Text(Event Player.Ashe_Bob_Invis);
		Destroy HUD Text(Event Player.Ashe_Bob_Out);
		Set Invisible(Event Player, None);
		disabled Clear Status(Event Player, Invincible);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("Sigma")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.sigmair);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Invisible while crouching", Null, Hero Icon String(Hero(Sigma))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Ult = Control gravity. \r\nEnables Fall damage!"), Custom String(""), Null, Left, 2,
			Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		disabled Event Player.Sigma_Ult_Player_Max_Height = Vertical Speed Of(Event Player);
		disabled Create HUD Text(All Players(All Teams), Event Player.Sigma_Ult_Player_Max_Height, Null, Event Player.Sigma_Ult_Player_Max_Speed,
			Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Event Player.sigmair = Last Text ID;
	}
}

rule("... Sigma | Crouching = Invisible")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
	}

	actions
	{
		Set Invisible(Event Player, Enemies);
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("... Sigma | Not Crouching = Visible")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Crouching(Event Player) == False;
	}

	actions
	{
		Set Invisible(Event Player, None);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("... Sigma | Sigma Controls Gravity Now!")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.SigmaUltPlayerArray = Null;
		Event Player.SigmaArrayCounter = 0;
		Destroy HUD Text(Global.SIGMA_ULT_HUD);
		Global.Sigma_Test = True;
		Create HUD Text(All Players(All Teams), Custom String("{1} {0} controls gravity! Suddenly fall damage matters! {2}", Event Player,
			Hero Icon String(Hero(Sigma)), Ability Icon String(Hero(Sigma), Button(Ultimate))), Null, Null, Top, 1, Color(Red), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Global.SIGMA_ULT_HUD = Last Text ID;
		Global.Sigma_Ulting = True;
		Global.Sigma_Player_Ulting = Event Player;
		Set Status(Event Player, Event Player, Unkillable, Match Time);
		Wait(1, Ignore Condition);
		Press Button(All Living Players(All Teams), Button(Jump));
		Apply Impulse(All Living Players(All Teams), Up, 70, To Player, Cancel Contrary Motion);
		Wait(0.500, Ignore Condition);
		Modify Player Variable(Event Player, SigmaUltPlayerArray, Append To Array, Filtered Array(All Living Players(All Teams),
			Current Array Element != Event Player));
		For Player Variable(Event Player, SigmaArrayCounter, 0, Count Of(Event Player.SigmaUltPlayerArray), 1);
			disabled Log To Inspector(Custom String("{0}{1}", Event Player.SigmaArrayCounter,
				Event Player.SigmaUltPlayerArray[Event Player.SigmaArrayCounter]));
			Event Player.SigmaUltPlayerArray[Event Player.SigmaArrayCounter].Sigma_Ult_Player_Max_Height = Altitude Of(
				Event Player.SigmaUltPlayerArray[Event Player.SigmaArrayCounter]);
		End;
		Set Gravity(All Living Players(All Teams), 0);
		Set Move Speed(All Living Players(All Teams), 3);
		Wait(4, Ignore Condition);
		"Filtered Array(All Living Players(All Teams), Compare(Current Array Element, !=, Event Player))"
		Apply Impulse(Filtered Array(All Living Players(All Teams), Current Array Element != Event Player), Backward, 3000, To Player,
			Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Set Status(Filtered Array(All Living Players(All Teams), Current Array Element != Event Player), Event Player, Stunned, 3);
		Set Gravity(All Living Players(All Teams), 1000);
		Wait(1.250, Ignore Condition);
		disabled Clear Status(Event Player, Unkillable);
		Set Gravity(All Living Players(All Teams), 100);
		Set Move Speed(All Living Players(All Teams), 100);
		Destroy HUD Text(Global.SIGMA_ULT_HUD);
		disabled Global.Sigma_Ulting = False;
		disabled Global.Sigma_Player_Ulting = Null;
		Wait(1.500, Ignore Condition);
		disabled Clear Status(Event Player, Unkillable);
		disabled Global.Sigma_Player_Ulting = Null;
		Global.Sigma_Test = False;
		Destroy HUD Text(Global.SIGMA_ULT_HUD);
		disabled Filtered Array(All Players(All Teams), Current Array Element != Event Player).Sigma_Ult_Player_Max_Height = Altitude Of(
			Filtered Array(All Players(All Teams), Current Array Element != Event Player));
	}
}

rule("...Sigma | Fall Damage Calculator")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		disabled Event Player.Sigma_Ult_Player_Max_Height < -10;
		disabled Event Player.Sigma_Ult_Player_Max_Height == True;
		disabled Global.Sigma_Ulting != Event Player;
		(Event Player.Sigma_Ult_Player_Max_Height >= 3) == True;
		Horizontal Speed Of(Event Player) == True;
		Global.Sigma_Ulting == True;
		Event Player != Global.Sigma_Player_Ulting;
	}

	actions
	{
		"Falling from higher than 6 m"
		If(Event Player.Sigma_Ult_Player_Max_Height > 6);
			"damage mitigation for armor"
			If(Max Health Of Type(Event Player, Armor) > 1);
				disabled Log To Inspector(Custom String("{0} Armor..Current Health Before {1}", Event Player, Health(Event Player)));
				Damage(Event Player, Global.Sigma_Player_Ulting, Max Health(Event Player) * 0.100);
				disabled Log To Inspector(Custom String("{0} Armor..Current Health After {1}", Event Player, Health(Event Player)));
			"damage mitigation for shields"
			Else If(Max Health Of Type(Event Player, Shields) > 1);
				disabled Log To Inspector(Custom String("{0} Shields..Current Health Before {1}", Event Player, Health(Event Player)));
				Damage(Event Player, Global.Sigma_Player_Ulting, Max Health(Event Player) * 0.100);
				disabled Log To Inspector(Custom String("{0} Shields..Current Health Before {1}", Event Player, Health(Event Player)));
			Else;
				disabled Log To Inspector(Custom String("{0} Nothing..Current Health Before {1}", Event Player, Health(Event Player)));
				Damage(Event Player, Global.Sigma_Player_Ulting, Max Health(Event Player) * 0.150);
				disabled Log To Inspector(Custom String("{0} Nothing..Current Health After {1}", Event Player, Health(Event Player)));
			End;
		Else;
			disabled Log To Inspector(Custom String("{0} Barely Moved..Current Health Before {1}", Event Player, Health(Event Player)));
			Damage(Event Player, Global.Sigma_Player_Ulting, 10);
			disabled Log To Inspector(Custom String("{0} Barely Moved..Current Health After {1}", Event Player, Health(Event Player)));
		End;
	}
}

rule("...Sigma | Ult Clean Up")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		Global.Sigma_Player_Ulting == Event Player;
		Global.Sigma_Player_Ulting != Null;
		Is Using Ultimate(Event Player) == False;
		Global.Sigma_Ulting == True;
	}

	actions
	{
		Wait Until(Global.Sigma_Test == False, 99999);
		Global.Sigma_Ulting = False;
		Global.Sigma_Player_Ulting = Null;
		Clear Status(Event Player, Unkillable);
	}
}

rule("Brigitte")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Use your shield wisely", Null, Hero Icon String(Hero(Brigitte))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Make use of cliffs"), Custom String(""), Null, Left, 2, Color(Blue), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
	}
}

rule("...Brig Shield Change")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
	}

	actions
	{
		Start Scaling Barriers(Event Player, 2, True);
		Wait Until(Hero Of(Event Player) != Hero(Brigitte), 99999);
		Stop Scaling Barriers(Event Player);
	}
}

rule("Mei")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Damage instantly freezes victims", Null, Hero Icon String(Hero(Mei))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Mei | Freeze!")
{
	event
	{
		Player Dealt Damage;
		All;
		Mei;
	}

	conditions
	{
		Hero(Mei) == True;
	}

	actions
	{
		Set Status(Victim, Null, Frozen, 0.500);
	}
}

rule("Reaper")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} You can wraith through walls. \r\nUse it wisely.", Null, Hero Icon String(Hero(
			Reaper))), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		disabled Start Forcing Player Outlines(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Event Player, True,
			Color(Red), Always);
	}
}

rule("...Reaper | Wraith Through Walls")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, False);
		disabled Set Gravity(Event Player, 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Set Gravity(Event Player, 100);
		Enable Movement Collision With Environment(Event Player);
	}
}

rule("Pharah")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Invulnerable during ultimate", Null, Hero Icon String(Hero(Pharah))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Pharah | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 3);
	}
}

rule("Reinhardt")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.Hud_Text_3);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} In his prime! SMASH!", Null, Hero Icon String(Hero(Reinhardt))), Null, Null, Left,
			1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		disabled Create HUD Text(Event Player, Null, Custom String("1. Charge 'vacuum' effect increased"), Null, Left, 2, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		disabled Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Custom String(""), Custom String(
			"1. {0}Earthshatter goes in all directions and goes through shields", Ability Icon String(Hero(Reinhardt), Button(Ultimate))),
			Null, Left, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Hud_Text_3 = Last Text ID;
	}
}

rule("... Reinhardt | Ultimate | Settings - [D = Divisions] [R = Radius]  (from u/mitsiee on https://workshop.codes)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Reinhardt_Divisions = 4;
		Global.Reinhardt_Radius = 25;
	}
}

rule("... Reinhardt before using ultimate - [(p)i = Loop] [(p)j = Remove loop] [(p)P = Position] (from u/mitsiee)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Event Player.Reinhardt_Player_Pos = Position Of(Event Player);
		Event Player.Reinhardt_Ring_Counter = 0;
		Event Player.Super_Punch_Cooldown = 0;
		Set Damage Dealt(Event Player, 0);
		Event Player.ReinShouldStart = True;
		Wait(0.500, Ignore Condition);
		Set Damage Dealt(Event Player, 45);
		Event Player.ReinShouldStart = False;
		disabled Log To Inspector(Custom String("Current Health {0}", Health(Event Player)));
		disabled Modify Player Variable(Event Player, ReinShatterArray, Append To Array, Filtered Array(Players Within Radius(
			Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Opposite Team Of(Team Of(Event Player)), Surfaces),
			Current Array Element != Event Player && Current Array Element.ReinHasBeenHit != True));
	}
}

rule("... Reinhardt uses his ultimate (modified for FFA from u/mitsiee on https://workshop.codes)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) == Hero(Reinhardt);
		Event Player.ReinShouldStart == True;
	}

	actions
	{
		Wait Until(Event Player.ReinShouldStart == False, 99999);
		If(Event Player.Reinhardt_Ring_Counter == 0);
		End;
		disabled For Player Variable(Event Player, Reinhardt_Ring_Counter, 0, Event Player.Reinhardt_Ring_Counter == Global.Reinhardt_Divisions + 1,
			1);
		Event Player.Reinhardt_Ring_Counter += 1;
		Create Effect(All Players(All Teams), Ring, Color(Red), Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Visible To);
		Event Player.Rein_Circle_Red_Entity_Array[Event Player.Reinhardt_Ring_Counter] = Last Created Entity;
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player.Reinhardt_Player_Pos,
			Event Player.Reinhardt_Ring_Counter * (Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Visible To);
		Event Player.Rein_Circle_White_Entity_Array[Event Player.Reinhardt_Ring_Counter] = Last Created Entity;
		Log To Inspector(Custom String("Before Current Health {0},{1}", Health(Players Within Radius(Event Player.Reinhardt_Player_Pos,
			Event Player.Reinhardt_Ring_Counter * (Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Opposite Team Of(Team Of(
			Event Player)), Surfaces)), Event Player.Reinhardt_Ring_Counter));
		Damage(Filtered Array(Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), All Teams, Surfaces),
			Current Array Element != Event Player && Is On Ground(Current Array Element)
			== True && Current Array Element.ReinHasBeenHit != True), Event Player, 100 / Global.Reinhardt_Divisions);
		Set Status(Filtered Array(Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), All Teams, Surfaces),
			Current Array Element != Event Player && Current Array Element != Has Status(Event Player, Knocked Down)
			&& Current Array Element.ReinHasBeenHit != True && Is On Ground(Current Array Element) == True), Event Player, Knocked Down,
			4);
		Modify Player Variable(Event Player, ReinShatterArray, Append To Array, Filtered Array(Players Within Radius(
			Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), All Teams, Surfaces),
			Current Array Element != Event Player && Current Array Element.ReinHasBeenHit != True && Is On Ground(Current Array Element)
			== True));
		Log To Inspector(Custom String("after Current Health {0}{1}", Health(Players Within Radius(Event Player.Reinhardt_Player_Pos,
			Event Player.Reinhardt_Ring_Counter * (Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Opposite Team Of(Team Of(
			Event Player)), Surfaces)), Event Player.Reinhardt_Ring_Counter));
		disabled Damage(Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, 100 / Global.Reinhardt_Divisions);
		Filtered Array(Event Player.ReinShatterArray, False).ReinHasBeenHit = True;
		disabled Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Opposite Team Of(Team Of(Event Player)), Surfaces)
			.ReinHasBeenHit = True;
		disabled Set Status(Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player,
			Knocked Down, 5);
		Skip If(Event Player.Reinhardt_Ring_Counter == Global.Reinhardt_Divisions + 1, 2);
		Wait(0.100, Ignore Condition);
		Loop;
		Event Player.Reinhardt_Ring_Counter = 0;
		disabled Damage(Filtered Array(Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), All Teams, Surfaces), Current Array Element != Event Player),
			Event Player, 100 / Global.Reinhardt_Divisions);
		disabled Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Opposite Team Of(Team Of(Event Player)), Surfaces)
			.ReinHasBeenHit = False;
		disabled Damage(Filtered Array(Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), All Teams, Surfaces), Current Array Element != Event Player),
			Event Player, 100 / Global.Reinhardt_Divisions);
	}
}

rule("... Reinhardt after using ultimate (from u/mitsiee on https://workshop.codes)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Skip If(Event Player.Super_Punch_Cooldown != 0, 1);
		Wait(1.500, Ignore Condition);
		Event Player.Super_Punch_Cooldown += 1;
		Destroy Effect(Event Player.Rein_Circle_Red_Entity_Array[Event Player.Super_Punch_Cooldown]);
		Destroy Effect(Event Player.Rein_Circle_White_Entity_Array[Event Player.Super_Punch_Cooldown]);
		Skip If(Event Player.Super_Punch_Cooldown == Global.Reinhardt_Divisions + 1, 2);
		Wait(0.100, Ignore Condition);
		Loop;
		Players Within Radius(Event Player.Reinhardt_Player_Pos, Event Player.Reinhardt_Ring_Counter * (
			Global.Reinhardt_Radius / Global.Reinhardt_Divisions), Opposite Team Of(Team Of(Event Player)), Surfaces)
			.ReinHasBeenHit = False;
		Event Player.Super_Punch_Cooldown = 0;
		Set Damage Dealt(Event Player, 100);
		Filtered Array(Event Player.ReinShatterArray, False).ReinHasBeenHit = False;
		Event Player.ReinShatterArray = Empty Array;
	}
}

rule("Zarya")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.Hud_Text_3);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Big big girl in a big big world...", Null, Hero Icon String(Hero(Zarya))), Null,
			Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Ultimate = Become a Charged Black Hole"), Custom String(""), Null, Left, 2, Color(
			Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Null, Custom String("1. Don't ult while another Zarya is ulting. It's buggy {0}", Icon String(
			Happy)), Null, Left, 3, Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Hud_Text_3 = Last Text ID;
	}
}

rule("... Zarya | Ultimate | Super Succ Warning HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Global.Zarya_Ultimate_User = Event Player;
		Wait Until(Event Player.ZayraUltIsCharged == True, 20);
		Event Player.Zarya_Ultimate_Warning_HUD = 10;
		Destroy HUD Text(Event Player.ZayraUltHud);
		Create HUD Text(All Players(All Teams), Custom String("{1} {0} turned into a black hole & sucking you in:", Event Player,
			Hero Icon String(Hero(Zarya))), Event Player.Zarya_Ultimate_Warning_HUD, Null, Top, 2, Color(Red), Color(Red), Color(White),
			Visible To and String, Default Visibility);
		Event Player.ZayraUltHud = Last Text ID;
		Wait(10, Ignore Condition);
		Destroy HUD Text(Event Player.ZayraUltHud);
		Clear Status(Event Player, Unkillable);
		Global.Zarya_Ultimate_User = False;
	}
}

rule("... Zarya | Ultimate | Multi Zayra /Clean up")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		disabled Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait Until(Global.Zarya_Ultimate_User != Event Player, 12);
		Log To Inspector(Custom String("{0} - Backup Zarya Clean up Ran", Event Player));
		Stop Accelerating(Remove From Array(All Players(All Teams), Event Player));
		Set Ability Cooldown(Event Player, Button(Ability 1), 5);
		Stop Forcing Throttle(Remove From Array(All Players(All Teams), Event Player));
		Set Gravity(Remove From Array(All Players(All Teams), Event Player), 100);
		Event Player.ZayraUltIsCharged = False;
		disabled Global.Zarya_Ultimate_User = Event Player;
		Remove Health Pool From Player(Event Player.ZayraHealthPoolMod);
		Destroy HUD Text(Event Player.ZayraUltHud);
		Wait(3, Ignore Condition);
		Global.ZaryaUltReset = True;
		Destroy Effect(Event Player.ZaryaBlackHoleEffect);
		Clear Status(Event Player, Unkillable);
		Global.Zarya_Ultimate_User = False;
	}
}

rule("... Zarya | Ultimate | Super Succ | Max Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"pray the other zarya is done"
		Wait Until(Global.ZaryaUltReset == True, 20);
		Set Status(Event Player, Null, Unkillable, 11);
		Global.ZaryaUltReset = False;
		Global.ZaryaStartMoving = True;
		disabled Set Ability Charge(Event Player, Button(Primary Fire), 100);
		Destroy Effect(Event Player.ZaryaBlackHoleEffect);
		Remove Health Pool From Player(Event Player.ZayraHealthPoolMod);
		Set Ability Cooldown(Event Player, Button(Ability 1), 1);
		Wait(1, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
		disabled Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Black), Event Player, 100);
		disabled Event Player.ZaryaUltSound = Last Created Entity;
		Create Effect(All Players(All Teams), Bad Aura, Color(Black), Event Player, 50, Visible To Position and Radius);
		Event Player.ZaryaBlackHoleEffect = Last Created Entity;
		Event Player.ZayraUltIsCharged = True;
		Add Health Pool To Player(Event Player, Shields, 3750, False, True);
		Event Player.ZayraHealthPoolMod = Last Created Health Pool;
		disabled Event Player.Zarya_Ultimate_Warning_HUD = 10;
		disabled Wait(1, Ignore Condition);
		disabled Damage(Event Player, Event Player, 500);
		Start Forcing Throttle(Remove From Array(All Players(All Teams), Event Player), 0, 0, 0, 0, 0, 0);
		Set Gravity(Remove From Array(All Players(All Teams), Event Player), 0);
		Press Button(Event Player, Button(Ability 1));
		Clear Status(Event Player, Unkillable);
		disabled Global.Zarya_Ultimate_User = Event Player;
		Wait(10, Ignore Condition);
		Stop Accelerating(Remove From Array(All Players(All Teams), Event Player));
		Stop Forcing Throttle(Remove From Array(All Players(All Teams), Event Player));
		Set Gravity(Remove From Array(All Players(All Teams), Event Player), 100);
		Global.Zarya_Ultimate_User = False;
		Global.ZaryaStartMoving = False;
		Destroy Effect(Event Player.ZaryaBlackHoleEffect);
		disabled Destroy Effect(Event Player.ZaryaUltSound);
		Remove Health Pool From Player(Event Player.ZayraHealthPoolMod);
	}
}

rule("... Zarya | Ultimate | Super Succ Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Event Player.Zarya_Ultimate_Warning_HUD != Null;
		Event Player.ZayraUltIsCharged == True;
	}

	actions
	{
		Event Player.Zarya_Ultimate_Warning_HUD -= 1;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Destroy HUD Text(Event Player.ZayraUltHud);
		Event Player.Zarya_Ultimate_Warning_HUD = Null;
	}
}

rule("... Zarya | Ultimate | Moving to Zarya")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Zarya_Ultimate_User != False;
		Event Player != Global.Zarya_Ultimate_User;
	}

	actions
	{
		Log To Inspector(Custom String("Zarya Ult Waiting"));
		"pray the other zarya is done"
		Wait Until(Global.ZaryaStartMoving == True, 20);
		Log To Inspector(Custom String("Zarya Still Moving"));
		Abort If(Is Dead(Global.Zarya_Ultimate_User) == True || Entity Exists(Global.Zarya_Ultimate_User)
			== False || Global.Zarya_Ultimate_User == False || Hero Of(Global.Zarya_Ultimate_User) != Hero(Zarya));
		Start Accelerating(Event Player, Global.Zarya_Ultimate_User - Event Player, 200, 300, To World, Direction Rate and Max Speed);
	}
}

rule("... Zarya | Bubble Gives Boost Speed | Max Charge when ulting")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 200);
		If(Is Using Ultimate(Event Player));
			Damage(Event Player, Null, 500);
			Heal(Event Player, Null, 500);
		End;
		Wait(3, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Set Ability Charge(Event Player, Button(Primary Fire), 100);
	}
}

rule("Baptiste")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Final blows give you a heal over time", Null, Hero Icon String(Hero(Baptiste))),
			Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Baptiste | Healing over Time")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Baptiste;
	}

	actions
	{
		Big Message(Event Player, Custom String("Healing for 10 sec"));
		Start Heal Over Time(Event Player, Event Player, 10, 35);
	}
}

rule("Mccree")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Stun closest player with (E)", Null, Hero Icon String(Hero(McCree))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		disabled Destroy HUD Text(Event Player.Hud_Text_3);
		Create HUD Text(Event Player, Custom String(""), Custom String("1. You can't be killed while ulting."), Null, Left, 3, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
	}
}

rule("... Mccree | Stun Closest Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Closest Player To(Event Player, All Teams), Event Player, Stunned, 1.500);
	}
}

rule("... Mccree | Ultimate On")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Damage Dealt(Event Player, 8000);
	}
}

rule("... Mccree | Ultimate Off")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Clear Status(Event Player, Phased Out);
	}
}

rule("Genji")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} High Jumps & Unlimited Dash", Null, Hero Icon String(Hero(Genji))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Genji | Fiery Ultimate Start")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Bad Aura, Color(Red), Event Player, 1, Visible To Position and Radius);
		Event Player.Genji_Ultimate_Effect = Last Created Entity;
		Set Status(Event Player, Null, Burning, 6);
		Set Damage Dealt(Event Player, 300);
	}
}

rule("... Genji | Fiery Ultimate End")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Destroy Effect(Event Player.Genji_Ultimate_Effect);
		Destroy Effect(Event Player.Genji_Ultimate_Effect);
		Clear Status(Event Player, Burning);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("Bastion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Bastion_Power < 6;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Event Player.Bastion_Power += 0;
		Create HUD Text(Event Player, Custom String("{1} Level 2: Kill 6 players", Null, Hero Icon String(Hero(Bastion))),
			Event Player.Bastion_Power, Null, Left, 2, Color(Purple), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Bastion | Objective Progress")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.Bastion_Power < 6;
	}

	actions
	{
		Event Player.Bastion_Power += 1;
	}
}

rule("... Bastion | Modify Global Variable Level 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Bastion_Power == 6;
	}

	actions
	{
		Global.Total_Level2_Bastion += 1;
		Event Player.Bastion_Power += 1;
		Create HUD Text(All Players(All Teams), Custom String("{1} {0}'s Bastion is now level 2!", Event Player, Hero Icon String(Hero(
			Bastion))), Null, Null, Top, 2, Color(Turquoise), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Bastion_Level2_Warning_HUD = Last Text ID;
		Create HUD Text(Event Player, Hero Icon String(Hero(Bastion)), Custom String("Level 2"), Null, Left, 8, Color(Purple), Color(
			Purple), Color(White), Visible To and String, Default Visibility);
		Event Player.Bastion_Level2_Icon = Last Text ID;
		Wait(6, Ignore Condition);
		Destroy HUD Text(Event Player.Bastion_Level2_Warning_HUD);
	}
}

rule("... Bastion | Level 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Event Player.Bastion_Power >= 7;
		Is Using Ultimate(Event Player) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Event Player.Bastion_Ultimate_Effect);
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.350, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Bastion))), Null, Null, Left, 1, Color(
			Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Start Heal Over Time(Event Player, Event Player, 5, 2000);
		Set Ultimate Charge(Event Player, 100);
		Wait(1, Abort When False);
		Press Button(Event Player, Button(Ultimate));
		disabled Loop If Condition Is True;
	}
}

rule("... Bastion | Ultimate Effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Hero Being Played(Hero(Bastion), All Teams) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Bad Aura, Color(Purple), Event Player, 1, Visible To Position and Radius);
		Event Player.Bastion_Ultimate_Effect = Last Created Entity;
	}
}

rule("Roadhog")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Roadhog_Power < 1200;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Event Player.Roadhog_Power += 0;
		Create HUD Text(Event Player, Custom String("{1} Hook enemies and carry them to cliffs", Null, Hero Icon String(Hero(Roadhog))),
			Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Level 2: Deal 1200 damage", Null, Hero Icon String(Hero(Roadhog))),
			Event Player.Roadhog_Power, Null, Left, 2, Color(Purple), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
	}
}

rule("... Roadhog | Hooking You and Taking You")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Damage > 54.990;
		Event Damage < 60.010;
		Is Alive(Victim) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} You hooked {0}! Press [ability 1] again to throw them... off a cliff? ;)", Victim,
			Hero Icon String(Hero(Roadhog))), Null, Null, Top, 1, Color(Yellow), Color(White), Color(White), String, Default Visibility);
		Event Player.HUD_Text_Warning = Last Text ID;
		Create HUD Text(Victim, Custom String("{1} You got hooked by {0}!", Event Player, Hero Icon String(Hero(Roadhog))), Null, Null,
			Top, 1, Color(Red), Color(White), Color(White), String, Default Visibility);
		Victim.HUD_Text_Warning = Last Text ID;
		Set Gravity(Victim, 0);
		Event Player.Roadhog_Hook = Victim;
		Set Status(Victim, Null, Invincible, Global.Hook_Timer);
		For Player Variable(Event Player, Roadhog_Hook_Timer, 0, Global.Hook_Timer * 20, 1);
			Skip If(Has Status(Victim, Stunned), 1);
			Set Status(Victim, Null, Stunned, Global.Hook_Timer);
			Teleport(Event Player.Roadhog_Hook, World Vector Of(Vector(1, 1, 0.500), Event Player, Rotation And Translation));
			Wait(0.050, Ignore Condition);
			Abort If(Event Player.Roadhog_Hook == False);
		End;
		Clear Status(Event Player.Roadhog_Hook, Stunned);
		Destroy HUD Text(Event Player.HUD_Text_Warning);
		Destroy HUD Text(Event Player.Roadhog_Hook.HUD_Text_Warning);
		Set Gravity(Event Player.Roadhog_Hook, 100);
		Event Player.Roadhog_Hook = False;
	}
}

rule("... Roadhog | Hooking Release")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Ability 1)) || Is Dead(Event Player)) == True;
		Event Player.Roadhog_Hook != False;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_Warning);
		Destroy HUD Text(Event Player.Roadhog_Hook.HUD_Text_Warning);
		Set Gravity(Event Player.Roadhog_Hook, 100);
		Apply Impulse(Event Player.Roadhog_Hook, Facing Direction Of(Event Player), 20, To World, Cancel Contrary Motion);
		Set Environment Credit Player(Event Player.Roadhog_Hook, Event Player);
		Clear Status(Event Player.Roadhog_Hook, Stunned);
		Clear Status(Event Player.Roadhog_Hook, Invincible);
		Event Player.Roadhog_Hook = False;
	}
}

rule("... Roadhog | Objective Progress")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	actions
	{
		Event Player.Roadhog_Power += Event Damage;
	}
}

rule("... Roadhog | Level 2 | First Awoken")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Event Player.Roadhog_Power >= 1200;
		Is Alive(Event Player) == True;
		Is Hero Being Played(Hero(Roadhog), All Teams) == True;
		Event Player.Roadhog_Level2 != 100;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_Warning);
		Destroy HUD Text(Event Player.Roadhog_Hook.HUD_Text_Warning);
		Global.Total_Level2_Roadhog += 1;
		Destroy HUD Text(Event Player.Roadhog_Level2_Icon);
		Event Player.Roadhog_Level2 = 100;
		Create HUD Text(Event Player, Hero Icon String(Hero(Roadhog)), Custom String("Level 2"), Null, Left, 8, Color(Purple), Color(
			Purple), Color(White), Visible To and String, Default Visibility);
		Event Player.Roadhog_Level2_Icon = Last Text ID;
		Create HUD Text(All Players(All Teams), Custom String("{1} {0}'s Roadhog is now level 2!", Event Player, Hero Icon String(Hero(
			Roadhog))), Null, Null, Top, 2, Color(Turquoise), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Roadhog_Level2_Warning_HUD = Last Text ID;
		Wait(6, Ignore Condition);
		Destroy HUD Text(Event Player.Roadhog_Level2_Warning_HUD);
	}
}

rule("... Roadhog | Level 2 | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Is Alive(Event Player) == True;
		Event Player.Roadhog_Level2 == 100;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Set Status(Event Player, Null, Burning, Match Time);
		Set Ultimate Charge(Event Player, 100);
		Wait(1, Abort When False);
		Press Button(Event Player, Button(Ultimate));
		Loop If Condition Is True;
	}
}

rule("... Roadhog | Level 2 | Upgrades")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Roadhog_Level2 == 100;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Start Heal Over Time(Event Player, Event Player, 5, 2000);
		Set Damage Dealt(Event Player, 500);
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Roadhog))), Custom String(""), Null, Left,
			1, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Non-Stop Ultimate"), Custom String(""), Null, Left, 2, Color(Purple), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
	}
}

rule("Wrecking Ball")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} ULT = Invisible Mine Deployment \r\nfor 18 secs", Null, Hero Icon String(Hero(
			Wrecking Ball))), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("... Wrecking Ball | Unlimited Ultimate Power")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		disabled Start Scaling Player(Event Player, 3, True);
		Set Invisible(Event Player, All);
		Big Message(Event Player, Custom String("{0}The mine chamber is over loaded. Initiating emergency protocols.", Icon String(
			Warning)));
		Wait(1, Ignore Condition);
		Set Damage Dealt(Event Player, 900);
		disabled Create Effect(All Players(All Teams), Cloud, Color(Gray), Event Player, 3, Visible To Position and Radius);
		disabled Play Effect(All Players(All Teams), Explosion Sound, Color(Violet), Position Of(Event Player) + Up * 3, 10);
		For Player Variable(Event Player, Wrecking_Ball_Ultimate_Counter, 0, 18, 3);
			Abort If(Hero Of(Event Player) != Hero(Wrecking Ball) || Is Dead(Event Player) == True);
			disabled Event Player.Wrecking_Ball_Ultimate_Counter += 2.200;
			Event Player.Moira_Explanation = 100;
			Set Ultimate Charge(Event Player, 100);
			Press Button(Event Player, Button(Ultimate));
			Big Message(Event Player, Custom String("{0} Empyting mines!", Ability Icon String(Hero(Wrecking Ball), Button(Ultimate))));
			Wait(3.250, Ignore Condition);
			Communicate(Event Player, Sorry);
			Set Status(Event Player, Null, Knocked Down, 0.001);
			Wait(0.010, Ignore Condition);
			disabled Loop If(Event Player.Wrecking_Ball_Ultimate_Counter < 20);
		End;
		Event Player.Moira_Explanation = 0;
		Event Player.Wrecking_Ball_Ultimate_Counter = 0;
		disabled Wait(20, Ignore Condition);
		Big Message(Event Player, Custom String("Emergency protocols complete! Mine chamber at normal capacity {0}", Icon String(Happy)));
		Set Invisible(Event Player, None);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("Orisa | Explode after 50 seconds")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Orisa_Level2 < 100;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} 15 Sec to find a spot to \r\nstand your ground", Null, Hero Icon String(Hero(
			Orisa))), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Stay alive long enough\r\n to explode!"), Custom String(""), Null, Left, 2, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Wait(5, Ignore Condition);
		Abort If Condition Is False;
		Big Message(Event Player, Custom String("10 sec to find your perfect spot"));
		Wait(10, Ignore Condition);
		Abort If Condition Is False;
		Destroy HUD Text(Event Player.HUD_Text_1);
		Create HUD Text(Event Player, Custom String("{1} Unable to move! \r\nDefend your Position!", Null, Hero Icon String(Hero(Orisa))),
			Null, Null, Left, 1, Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Set Status(Event Player, Null, Burning, 50);
		Disallow Button(Event Player, Button(Jump));
		Apply Impulse(Event Player, Down, 70, To World, Cancel Contrary Motion);
		Destroy Icon(Event Player.Orisa_Power_Icon);
		Create Icon(All Players(All Teams), Event Player, Radioactive, Position, Color(White), False);
		Event Player.Orisa_Power_Icon = Last Created Entity;
		Set Move Speed(Event Player, 0);
		Set Ultimate Charge(Event Player, 100);
		Event Player.Orisa_Power = 50;
		Wait(25, Ignore Condition);
		Destroy Icon(All Dead Players(All Teams));
		Abort If Condition Is False;
		Wait(15, Ignore Condition);
		Destroy Icon(All Dead Players(All Teams));
		Abort If Condition Is False;
		Big Message(All Players(All Teams), Custom String("{1} {2} You have 10 sec to kill {0}! Work together!", Event Player,
			Hero Icon String(Hero(Orisa)), Icon String(Radioactive)));
		Wait(8, Ignore Condition);
		Destroy Icon(All Dead Players(All Teams));
		Abort If Condition Is False;
		Wait(2, Ignore Condition);
		Destroy Icon(All Dead Players(All Teams));
		Abort If Condition Is False;
		Set Move Speed(Event Player, 100);
		Kill(Filtered Array(All Living Players(All Teams), Current Array Element != Event Player), Event Player);
		Destroy Icon(Event Player.Orisa_Power_Icon);
		Destroy HUD Text(Event Player.Orisa_Kill_Warning_HUD);
		disabled Call Subroutine(Player_Reset);
		Event Player.Orisa_Level2 = 100;
	}
}

rule("... Orisa | Player Notification Orisa Explosion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.Orisa_Power == 50;
	}

	actions
	{
		Destroy HUD Text(Event Player.Orisa_Kill_Warning_HUD);
		Create HUD Text(All Players(All Teams), Custom String("{1} {2} {0} will kill everyone in:", Event Player, Hero Icon String(Hero(
			Orisa)), Icon String(Radioactive)), Event Player.Orisa_Power, Null, Top, 1, Color(Red), Color(Red), Color(White),
			Visible To and String, Default Visibility);
		Event Player.Orisa_Kill_Warning_HUD = Last Text ID;
	}
}

rule("... Orisa | Text 50 Seconds To Kill Orisa")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.Orisa_Power == 50;
	}

	actions
	{
		Event Player.Orisa_Power -= 1;
		Wait(1, Ignore Condition);
		Loop If(Is Alive(Event Player));
	}
}

rule("... Orisa | Level 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.Orisa_Level2 == 100;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Event Player, 10000);
		Create HUD Text(Event Player, Hero Icon String(Hero(Orisa)), Custom String("Level 2"), Null, Left, 8, Color(Purple), Color(Purple),
			Color(White), Visible To and String, Default Visibility);
		Event Player.Orisa_Level2_Icon = Last Text ID;
		Global.Total_Level2_Orisa += 1;
		Set Max Health(Event Player, 200);
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Event Player.Orisa_Level2 = 110;
		Create HUD Text(Event Player, Custom String("{1} Level 2 | Stay alive long \r\nenough to win the game!", Null, Hero Icon String(
			Hero(Orisa))), Null, Null, Left, 1, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Destroy HUD Text(Event Player.Orisa_Level2_Warning_HUD);
		Create HUD Text(All Players(All Teams), Custom String("{1} {0}'s Orisa is now level 2! Kill her fast!", Event Player,
			Hero Icon String(Hero(Orisa))), Null, Null, Top, 2, Color(Turquoise), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.Orisa_Level2_Warning_HUD = Last Text ID;
		Wait(6, Ignore Condition);
		Destroy HUD Text(Event Player.Orisa_Level2_Warning_HUD);
		Big Message(Event Player, Custom String("You can walk again! Woohoo!"));
	}
}

rule("... Orisa | Level 2 | Player Notification Orisa Explosion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.Orisa_Power_Level2 == 75;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.Orisa_Kill_Warning_HUD);
		Create HUD Text(All Players(All Teams), Custom String("{1} {2} {0} will win game if not killed:", Event Player, Hero Icon String(
			Hero(Orisa)), Icon String(Arrow: Down)), Event Player.Orisa_Power_Level2, Null, Top, 1, Color(Red), Color(Red), Color(White),
			Visible To and String, Default Visibility);
		Event Player.Orisa_Kill_Warning_HUD = Last Text ID;
	}
}

rule("... Orisa | Level 2 | Text 75 Seconds To Kill Orisa")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.Orisa_Power_Level2 == 75;
	}

	actions
	{
		Event Player.Orisa_Power_Level2 -= 1;
		Wait(1, Ignore Condition);
		Loop If(Is Alive(Event Player));
	}
}

rule("... Orisa | Stay Upgraded After Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.Orisa_Level2 == 110;
		Is Alive(Event Player) == True;
		Is Hero Being Played(Hero(Orisa), All Teams) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.Orisa_Kill_Warning_HUD);
		Set Status(Event Player, Null, Burning, 60);
		Destroy Icon(Event Player.Orisa_Power_Icon);
		Create Icon(All Players(All Teams), Event Player, Arrow: Down, Position, Color(White), False);
		Event Player.Orisa_Power_Icon = Last Created Entity;
		Event Player.Orisa_Power_Level2 = 75;
		Wait(20, Abort When False);
		Set Ultimate Charge(Event Player, 100);
		Wait(55, Abort When False);
		Set Player Score(Event Player, 50);
	}
}

rule("Soldier 76 | Base")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Soldier76_Power < 500;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Level 2: Activate Ultimate", Null, Hero Icon String(Hero(Soldier: 76))),
			Custom String(""), Null, Left, 2, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Soldier 76 | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Using Ultimate(Event Player) == True;
		Event Player.Soldier76_Power < 500;
	}

	actions
	{
		Global.Total_Level2_Soldier76 += 1;
		Event Player.Soldier76_Power = 500;
	}
}

rule("... Soldier 76 | Level 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.Soldier76_Power == 500;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Hero Icon String(Hero(Soldier: 76)), Custom String("Level 2"), Null, Left, 8, Color(Purple), Color(
			Purple), Color(White), Visible To and String, Default Visibility);
		Event Player.Soldier76_Level2_Icon = Last Text ID;
		Create HUD Text(Event Player, Custom String("You teleport to victims' location on every kill"), Custom String(""), Null, Left, 2,
			Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Soldier: 76))), Custom String(""), Null,
			Left, 1, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Event Player.Soldier76_Power += 10;
		Create HUD Text(All Players(All Teams), Custom String("{1} {0}'s Soldier 76 is now level 2! Infinite Ultimate...", Event Player,
			Hero Icon String(Hero(Soldier: 76))), Null, Null, Top, 2, Color(Turquoise), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.Soldier76_Level2_Warning_HUD = Last Text ID;
		Wait(6, Ignore Condition);
		Destroy HUD Text(Event Player.Soldier76_Level2_Warning_HUD);
	}
}

rule("... Soldier 76 | Stay Upgraded After Death 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Hero Being Played(Hero(Soldier: 76), All Teams) == True;
		Event Player.Soldier76_Power > 499;
		Is Using Ultimate(Event Player) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Soldier: 76))), Custom String(""), Null,
			Left, 2, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Custom String("You teleport to victims' location on every kill"), Custom String(""), Null, Left, 2,
			Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Soldier: 76))), Custom String(""), Null,
			Left, 1, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Set Ultimate Charge(Event Player, 100);
		Wait(1, Abort When False);
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("... Soldier 76 | Stay Upgraded After Death 2")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Hero Being Played(Hero(Soldier: 76), All Teams) == True;
		Event Player.Soldier76_Power > 499;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Victim);
	}
}

rule("Winston")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Hunt the low health heroes,\r\n Ultimate = Harambe Rage", Null, Hero Icon String(
			Hero(Winston))), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("... Winston | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 900);
	}
}

rule("... Winston | Not Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
	}
}

rule("LÃºcio")
{
	event
	{
		Ongoing - Each Player;
		All;
		LÃºcio;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.Hud_Text_3);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.HUD_Text_1);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Ult = Enemies within 20m of where you \r\nult fall through the map", Null,
			Hero Icon String(Hero(LÃºcio))), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String(""), Custom String(
			"1. Environmental kills give you 30% shields equal to the maximum health of the hero killed"), Null, Left, 3, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Custom String(""), Custom String("2. Increased damage while wall riding"), Null, Left, 4, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Hud_Text_3 = Last Text ID;
	}
}

rule("Lucio Damage Boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		LÃºcio;
	}

	conditions
	{
		Is On Wall(Event Player) == True;
		disabled Is On Ground(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 300);
	}
}

rule("Lucio Damage Reduction")
{
	event
	{
		Ongoing - Each Player;
		All;
		LÃºcio;
	}

	conditions
	{
		Is On Wall(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
	}
}

rule("Lucio Shield Boop")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Was Environment == True;
		(Hero Of(Attacker) == Hero(LÃºcio)) == True;
		Is Alive(Attacker) == True;
	}

	actions
	{
		Add Health Pool To Player(Attacker, Shields, Max Health(Event Player) * 0.300, False, True);
	}
}

rule("... LÃºcio | Spray Attack")
{
	event
	{
		Ongoing - Each Player;
		All;
		LÃºcio;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100);
		Wait(0.300, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("... LÃºcio | Push Victim Around")
{
	event
	{
		Player Dealt Damage;
		All;
		LÃºcio;
	}

	actions
	{
		Apply Impulse(Victim, Up, 10, To World, Cancel Contrary Motion);
		Apply Impulse(Victim, Facing Direction Of(Event Player), 200, To World, Cancel Contrary Motion);
	}
}

rule("... LÃºcio | Ultimate ->Break it down")
{
	event
	{
		Ongoing - Each Player;
		All;
		LÃºcio;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is On Ground(Event Player) == True;
		disabled Global.Lucio_Ultimate == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Event Player.LucioNearByArray = Null;
		disabled Global.Lucio_Ultimate = False;
		disabled Global.LucioUltPlayer = Null;
		Event Player.LucioUltPlayerPos = Position Of(Event Player);
		Modify Player Variable(Event Player, LucioNearByArray, Append To Array, Filtered Array(Players Within Radius(
			Event Player.LucioUltPlayerPos, 20, Opposite Team Of(Team Of(Event Player)), Surfaces),
			Current Array Element != Event Player && Is Alive(Current Array Element) == True && Is On Ground(Current Array Element)
			== True));
		Big Message(Event Player.LucioNearByArray, Custom String("{0}{1} just dropped the beat and the floor with it!", Hero Icon String(
			Hero(LÃºcio)), Event Player));
		Big Message(Event Player, Custom String("{0}You just dropped the beat and the floor with it!", Hero Icon String(Hero(LÃºcio)),
			Event Player));
		Wait(0.700, Ignore Condition);
		Communicate(Event Player.LucioNearByArray, No);
		Communicate(Event Player, Sorry);
		disabled Set Gravity(Event Player, 0);
		Disable Movement Collision With Environment(Event Player.LucioNearByArray, True);
		Set Environment Credit Player(Event Player.LucioNearByArray, Event Player);
		disabled Set Status(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Event Player, Stunned, 2);
		Wait(10, Ignore Condition);
	}
}

rule("TorbjÃ¶rn")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.Torb_Hud_text3);
		Destroy HUD Text(Event Player.Torb_Hud_text4);
		Destroy HUD Text(Event Player.Torb_Hud_Text5);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Turret deals with the small fry", Null, Hero Icon String(Hero(TorbjÃ¶rn))), Null,
			Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("ULT = You become the Lava God \r\n           and summon lava"), Null, Null, Left, 1,
			Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Null, Custom String("1. There is only 1 Lava God at a time"), Null, Left, 2, Color(Blue), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Event Player.Torb_Hud_text3 = Last Text ID;
		Create HUD Text(Event Player, Null, Custom String(
			"2. If there is already lava rising it won't reset\r\n but you will get kills so use your ultimate wisely!"), Null, Left, 5,
			Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Torb_Hud_text4 = Last Text ID;
		Create HUD Text(Event Player, Null, Custom String(
			"3. While Lava God you are immune to all damage \r\n   while standing in the rising lava. Use this to \r\n   your advantage."),
			Null, Left, 6, Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Torb_Hud_Text5 = Last Text ID;
	}
}

rule("... TorbjÃ¶rn | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Log To Inspector(Custom String("TORB ULT"));
		Global.Lava_Torbjorn_Activation = 1000;
		Global.Lava_Event_Player = Event Player;
		Destroy Icon(Global.Lava_Event_Player.Lava_Event_Lava_King_Icon);
		Create Icon(All Players(All Teams), Event Player, Fire, Position, Color(White), True);
		Event Player.Lava_Event_Lava_King_Icon = Last Created Entity;
		Set Player Health(Event Player, Max Health(Event Player));
		Set Move Speed(Event Player, 200);
		Remove Health Pool From Player(Event Player.TorbLavaGodArmor);
		Add Health Pool To Player(Event Player, Armor, 1000, False, True);
		Event Player.TorbLavaGodArmor = Last Created Health Pool;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: Petra")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Petra);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(2.097, -123.500, 9.112));
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 120, Absolute Value(0.300), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
		disabled Destroy Effect(Global.Lava_Effect_id);
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: King's Row")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(King's Row);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(-93.792, -102.041, -46.070));
		Modify Global Variable(Lava_Sizes, Append To Array, 95);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 118, Absolute Value(0.300), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 95, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: B-World")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Blizzard World);
	}

	actions
	{
		disabled Global.TorbLogHelper = Random Integer(0, 15);
		disabled Log To Inspector(Custom String("Entering Lava Land {0}", Global.TorbLogHelper));
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(-54.072, -101.265, 90.685));
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 107, Absolute Value(0.200), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
		disabled Log To Inspector(Custom String("Leaving Lava Land {0}", Global.TorbLogHelper));
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: B-World Winter")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Blizzard World Winter);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(-54.072, -101.265, 90.685));
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 107, Absolute Value(0.200), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: ChÃ¢teau Guillard")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(ChÃ¢teau Guillard);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(206.260, -101.455, 84.316));
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 112, Absolute Value(0.200), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: Hollywood")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Hollywood);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(8.295, -100.707, -48.145));
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 107.400, Absolute Value(0.300), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: Paris")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Paris);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Modify Global Variable(Lava_Position, Append To Array, Vector(-71, -90, -40));
		disabled Modify Global Variable(Lava_Position, Append To Array, Vector(-97, -5, -85));
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 115, Absolute Value(0.200), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: Eichenwalde")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Eichenwalde);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(68.082, -96.269, -81.329));
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(Global.Lava_Torbjorn_Activation == 1000 ? All Players(All Teams) : Null, Sphere, Color(Red),
			Global.Lava_Position[Global.Lava_Rising_Array_Looper], Global.Lava_Sizes[Global.Lava_Rising_Array_Looper],
			Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 115, Absolute Value(0.200), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: Kanezaka")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Kanezaka);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Modify Global Variable(Lava_Position, Append To Array, Vector(-28, -95, -6.230));
		disabled Modify Global Variable(Lava_Position, Append To Array, Vector(-97, -5, -85));
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 115, Absolute Value(0.200), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: Dorado")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Dorado);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(118.871, -90.281, 22.735));
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 106, Absolute Value(0.200), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava Rising | Map: Hanamura")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 1000;
		Current Map == Map(Hanamura);
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Global.Lava_Event_Player), Custom String(
			"{1} Watch out for lava! {0}", Global.Lava_Event_Player != Null ? Custom String(
			"{0} is the Lava God and \r\nis immune to damage while standing in lava.", Global.Lava_Event_Player) : Custom String(
			"The Lava God is dead but the lava remains. {0}", Icon String(Sad)), Hero Icon String(Hero(TorbjÃ¶rn))),
			Global.Lava_HUD_Warning_Timer, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Global.Lava_HUD_Warning = Last Text ID;
		Global.Lava_HUD_Warning_Timer = 60;
		Modify Global Variable(Lava_Position, Append To Array, Vector(12.741, -104.769, -48.970));
		Modify Global Variable(Lava_Sizes, Append To Array, 100);
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Lava_Position[Global.Lava_Rising_Array_Looper],
			Global.Lava_Sizes[Global.Lava_Rising_Array_Looper], Visible To Position and Radius);
		disabled Global.Lava_Effect_id = Last Created Entity;
		Chase Global Variable At Rate(Lava_Sizes, 107, Absolute Value(0.200), Destination and Rate);
		Wait(60, Ignore Condition);
		Chase Global Variable At Rate(Lava_Sizes, 100, Absolute Value(2), Destination and Rate);
		Global.Lava_Torbjorn_Activation = 0;
		Destroy HUD Text(Global.Lava_HUD_Warning);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava - Start damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player != Global.Lava_Event_Player;
		Is True For Any(Global.Lava_Position, Distance Between(Current Array Element, Position Of(Event Player))
			<= Global.Lava_Sizes[Index Of Array Value(Global.Lava_Position, Current Array Element)] || Distance Between(
			Current Array Element, Eye Position(Event Player)) <= Global.Lava_Sizes[Index Of Array Value(Global.Lava_Position,
			Current Array Element)]) == True;
		Event Player.Lava_Activated_Player == 0;
		Global.Lava_Torbjorn_Activation == 1000;
	}

	actions
	{
		Set Status(Event Player, Global.Lava_Event_Player, Stunned, 1);
		Set Status(Event Player, Global.Lava_Event_Player, Burning, Match Time);
		Start Damage Over Time(Event Player, Global.Lava_Event_Player, Match Time, 120);
	}
}

rule("... TorbjÃ¶rn | Lava - Stop damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.Lava_Position, Distance Between(Current Array Element, Position Of(Event Player))
			<= Global.Lava_Sizes[Index Of Array Value(Global.Lava_Position, Current Array Element)] || Distance Between(
			Current Array Element, Eye Position(Event Player)) <= Global.Lava_Sizes[Index Of Array Value(Global.Lava_Position,
			Current Array Element)]) == False;
		Event Player != Global.Lava_Event_Player;
		Global.Lava_Torbjorn_Activation == 1000;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Stop All Damage Over Time(Event Player);
	}
}

rule("... TorbjÃ¶rn | Lava King - Unkillable")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.Lava_Event_Player;
		Is True For Any(Global.Lava_Position, Distance Between(Current Array Element, Position Of(Event Player))
			<= Global.Lava_Sizes[Index Of Array Value(Global.Lava_Position, Current Array Element)] || Distance Between(
			Current Array Element, Eye Position(Event Player)) <= Global.Lava_Sizes[Index Of Array Value(Global.Lava_Position,
			Current Array Element)]) == True;
		Event Player.Lava_Activated_Player == 0;
		Global.Lava_Torbjorn_Activation == 1000;
	}

	actions
	{
		Communicate(Event Player, Voice Line Up);
		disabled Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Remove Health Pool From Player(Event Player.TorbLavaGodArmor);
		Set Player Health(Event Player, Max Health(Event Player));
		Press Button(Event Player, Button(Ability 2));
		Set Damage Dealt(Event Player, 500);
		Set Status(Event Player, Null, Invincible, 999991);
		Wait Until(Event Player != Global.Lava_Event_Player, 99999);
		Clear Status(Event Player, Invincible);
	}
}

rule("... TorbjÃ¶rn | Lava King - Killable")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.Lava_Position, Distance Between(Current Array Element, Position Of(Event Player))
			<= Global.Lava_Sizes[Index Of Array Value(Global.Lava_Position, Current Array Element)] || Distance Between(
			Current Array Element, Eye Position(Event Player)) <= Global.Lava_Sizes[Index Of Array Value(Global.Lava_Position,
			Current Array Element)]) == False;
		Event Player == Global.Lava_Event_Player;
		Global.Lava_Torbjorn_Activation == 1000;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Stop All Damage Over Time(Event Player);
		Clear Status(Event Player, Invincible);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("...clear Lava King Assets")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_Torbjorn_Activation == 0;
		Global.Lava_Event_Player != Null;
	}

	actions
	{
		Clear Status(Global.Lava_Event_Player, Unkillable);
		Destroy Icon(Global.Lava_Event_Player.Lava_Event_Lava_King_Icon);
		Global.Lava_Event_Player.Lava_Event_Lava_King_Icon = Null;
		Set Move Speed(Global.Lava_Event_Player, 100);
		Global.Lava_Event_Player = Null;
	}
}

rule("... TorbjÃ¶rn | Lava - Text Warning: 60 Seconds Lava Rising")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Lava_HUD_Warning_Timer == 60;
	}

	actions
	{
		Global.Lava_HUD_Warning_Timer -= 1;
		Wait(1, Ignore Condition);
		Loop If(Global.Lava_HUD_Warning_Timer >= 0);
		disabled Global.Lava_Torbjorn_Activation = 0;
	}
}

rule("Echo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Be the god you know you are", Null, Hero Icon String(Hero(Echo))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Start Damage Modification(Event Player, Event Player, 0, None);
		Event Player.Echo_Immunity = Last Damage Modification ID;
	}
}

rule("... Echo | Non-Stop Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.300, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Zenyatta")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Balls relocate victims", Null, Hero Icon String(Hero(Zenyatta))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Ultimate makes victims walk\r\nin your facing direction {1}", Null, Icon String(
			Dizzy)), Null, Null, Left, 2, Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Set Ammo(Event Player, 0, 2);
		Set Max Ammo(Event Player, 0, 2);
	}
}

rule("... Zenyatta | Relocate Victim")
{
	event
	{
		Player Dealt Damage;
		All;
		Zenyatta;
	}

	actions
	{
		Event Player.Zenyatta_Power += 10;
		Abort If(Is Dead(Victim));
		Communicate(Event Player, Goodbye);
		Big Message(Victim, Custom String("{1} You got hit by {0}! ... Your setback is only temporary!", Event Player, Hero Icon String(
			Hero(Zenyatta))));
		Set Gravity(Victim, 500);
		Event Player.HUD_Text_Start_Game_1 = 6;
		Play Effect(Victim, Bad Pickup Effect, Color(Red), Victim, 2);
		Teleport(Filtered Array(Victim, Current Map == Map(King's Row)), Vector(-139.643, -5.305, 19.736));
		Teleport(Filtered Array(Victim, Current Map == Map(Petra)), Vector(39.164, -2.849, 52.752));
		If(Current Map == Map(Hollywood));
			Teleport(Filtered Array(Victim, Current Map == Map(Hollywood)), Vector(-60, 120.150, -181));
			Wait(0.250, Ignore Condition);
			Set Facing(Victim, Vector(-0.300, -0.050, -0.950), To World);
			Disable Movement Collision With Environment(Victim, True);
		End;
		Teleport(Filtered Array(Victim, Current Map == Map(Paris)), Vector(-103.462, 21.254, -20.372));
		Teleport(Filtered Array(Victim, Current Map == Map(ChÃ¢teau Guillard)), Vector(183.502, 21.910, 36.580));
		Teleport(Filtered Array(Victim, Current Map == Map(Eichenwalde)), Vector(73.752, 20.445, -84.828));
		Teleport(Filtered Array(Victim, Current Map == Map(Blizzard World)), Vector(-31.293, 7.431, 132.825));
		Teleport(Filtered Array(Victim, Current Map == Map(Kanezaka)), Vector(-41, 15, 63));
		Teleport(Filtered Array(Victim, Current Map == Map(Blizzard World Winter)), Vector(-31.293, 7.431, 132.825));
		Teleport(Filtered Array(Victim, Current Map == Map(Dorado)), Vector(94.953, 33.565, 74.193));
		Teleport(Filtered Array(Victim, Current Map == Map(Hanamura)), Vector(-46.389, 20.429, -30.627));
		Set Status(Victim, Event Player, Stunned, 1);
		Set Environment Credit Player(Victim, Event Player);
		disabled Teleport(Filtered Array(Victim, Current Map == Map(Hollywood)), Vector(-43.450, 60.750, -174));
	}
}

rule("... Zenyatta | Ultimate Mind Control")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.Zenyatta_MindControl_Warning_HUD);
		Set Status(Event Player, Null, Unkillable, 12);
		Event Player.Zenyatta_Power = 12;
		Create HUD Text(All Players(All Teams), Custom String("{1} {0} is casting Mind Control", Event Player, Hero Icon String(Hero(
			Zenyatta))), Null, Null, Top, 2, Color(Red), Color(Red), Color(White), Visible To and String, Default Visibility);
		Event Player.Zenyatta_MindControl_Warning_HUD = Last Text ID;
		Global.Zenyatta_Mind_Control = Event Player;
		Set Status(Remove From Array(All Players(All Teams), Event Player), Null, Hacked, 12);
		Wait(6, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(6, Ignore Condition);
		Global.Zenyatta_Mind_Control = False;
		Destroy HUD Text(Event Player.Zenyatta_MindControl_Warning_HUD);
	}
}

rule("... Zenyatta | Ultimate Mind Control Active")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Zenyatta_Mind_Control != False;
		Event Player != Global.Zenyatta_Mind_Control;
		Distance Between(Event Player, Global.Zenyatta_Mind_Control) <= 10;
		Is In Line of Sight(Event Player, Global.Zenyatta_Mind_Control, Barriers Do Not Block LOS) == True;
	}

	actions
	{
		Start Facing(Event Player, Facing Direction Of(Global.Zenyatta_Mind_Control), 360, To World, Direction and Turn Rate);
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
	}
}

rule("... Zenyatta | Ultimate Mind Control Stopped")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(!(Distance Between(Event Player, Global.Zenyatta_Mind_Control) <= 10) || !Is In Line of Sight(Event Player,
			Global.Zenyatta_Mind_Control, Barriers Do Not Block LOS) || Global.Zenyatta_Mind_Control == False) == True;
	}

	actions
	{
		Stop Facing(Event Player);
		Stop Forcing Throttle(Event Player);
	}
}

rule("Ana")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Ana_Level2 < 100;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Your poison lowers enemies' speed", Null, Hero Icon String(Hero(Ana))), Null,
			Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Level 2: Activate Ultimate"), Custom String(""), Null, Left, 2, Color(Purple), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Start Damage Modification(Event Player, Event Player, 0, None);
		Event Player.Ana_Immunity = Last Damage Modification ID;
	}
}

rule("... Ana | Base Level | Poisoned Speed")
{
	event
	{
		Player Dealt Damage;
		All;
		Ana;
	}

	conditions
	{
		Event Player.Ana_Level2 < 100;
	}

	actions
	{
		Set Move Speed(Victim, 50);
		Big Message(Victim, Custom String("{1} {0} poisoned your speed for 15 sec", Event Player, Hero Icon String(Hero(Ana))));
		Wait(15, Ignore Condition);
		Set Move Speed(Victim, 100);
	}
}

rule("... Ana | First Ultimate | Become Level 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ana);
		Is Using Ultimate(Event Player) == True;
		Event Player.Ana_Level2 < 100;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.Ana_Level2_Icon);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Event Player.Ana_Level2 = 100;
		Create HUD Text(Event Player, Hero Icon String(Hero(Ana)), Custom String("Level 2"), Null, Left, 8, Color(Purple), Color(Purple),
			Color(White), Visible To and String, Default Visibility);
		Event Player.Ana_Level2_Icon = Last Text ID;
		Wait(0.250, Ignore Condition);
		disabled Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Ana))), Custom String("*****"), Null, Left,
			2, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Event Player.HUD_Text_1 = Last Text ID;
		disabled Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String(
			"{1} {0}'s Ana is level 2! Nano'd damage injects you with fatal sleep poison {2}. Beware!", Event Player, Hero Icon String(
			Hero(Ana)), Ability Icon String(Hero(Widowmaker), Button(Ability 2))), Null, Null, Top, 2, Color(Turquoise), Color(White),
			Color(White), Visible To and String, Default Visibility);
		disabled Event Player.Ana_Level2_Warning_HUD = Last Text ID;
		Wait(6, Ignore Condition);
		disabled Destroy HUD Text(Event Player.Ana_Level2_Warning_HUD);
	}
}

rule("... Ana | Level 2 | Global HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.Ana_Level2 == 100;
	}

	actions
	{
		Event Player.Ana_Level2 = 200;
		Global.Total_Level2_Ana += 1;
	}
}

rule("... Ana | Level 2 | Re-activate Ultimate |Limit Grenades")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.Ana_Level2 >= 100;
		Is Using Ultimate(Event Player) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), 90);
	}
}

rule("... Ana | Level 2 | Re-activate Ultimate |Limit Ammo| Abilities")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.Ana_Level2 >= 100;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Big Message(Event Player, Custom String("{0} ALL DAMAGE SLEEPS AND KILLS. GO GRANDMA GO!", Hero Icon String(Hero(Ana))));
		Set Damage Dealt(Event Player, 0.001);
		Set Ammo(Event Player, 0, 7);
		Set Max Ammo(Event Player, 0, 7);
		Set Status(Event Player, Null, Invincible, 9999);
		disabled Set Reload Enabled(Event Player, False);
		disabled Set Ammo(Event Player, 0, 0);
		Destroy HUD Text(Event Player.Ana_Sleep_Poison_Hud);
		disabled Set Ability 1 Enabled(Event Player, False);
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Ana))), Custom String(
			"While Nano'd all damage sleeps and fatally \r\npoisons your target. Reduced Ammo and higher cooldowns. Unkillable"), Null,
			Left, 2, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String(
			"{1} {0} is nano'd and Level 2. Beware of fatal sleep poison! {2}", Event Player, Hero Icon String(Hero(Ana)), Icon String(
			Poison)), Null, Null, Top, 2, Color(Turquoise), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Ana_Sleep_Poison_Hud = Last Text ID;
		Wait(6, Ignore Condition);
		Destroy HUD Text(Event Player.Ana_Sleep_Poison_Hud);
		disabled Add Health Pool To Player(Event Player, Armor, 150, False, True);
	}
}

rule("... Ana | Level 2 | Connected Damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Attacker.Ana_Level2 >= 100;
		Is Using Ultimate(Attacker) == True;
		disabled Is Firing Primary(Attacker) == True;
		Event Player.Ana_death_sleep != True;
		Hero Of(Attacker) == Hero(Ana);
	}

	actions
	{
		disabled Start Damage Over Time(Victim, Event Player, 5, 100);
		disabled Start Damage Modification(Victim, Event Player, 50, None);
		Wait(0.100, Ignore Condition);
		Destroy HUD Text(Event Player.Ana_Sleep_Poison_Hud);
		Create HUD Text(Event Player, Custom String("{1}{0} has poisoned you. You're gonna die soon! {2}", Attacker, Hero Icon String(Hero(
			Ana)), Icon String(Poison)), Null, Null, Top, 1, Color(Red), Color(Red), Color(White), Visible To and String,
			Default Visibility);
		Event Player.Ana_Sleep_Poison_Hud = Last Text ID;
		disabled Damage(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Event Player, 1);
		disabled Heal(Event Player, Null, 1000);
		disabled Event Player.Ana_Immunity = Last Damage Modification ID;
		Stop All Damage Over Time(Event Player);
		disabled Stop Damage Over Time(Last Damage Over Time ID);
		Set Damage Dealt(Attacker, 0.001);
		disabled Abort If(Victim.Ana_death_sleep == True);
		Victim.Ana_death_sleep = True;
		Set Status(Victim, Attacker, Unkillable, 6);
		Set Player Health(Victim, 5);
		"set"
		Set Status(Event Player, Attacker, Asleep, 6);
		Wait(5, Ignore Condition);
		Clear Status(Victim, Unkillable);
		Kill(Victim, Attacker);
		disabled Stop All Damage Over Time(Victim);
		disabled Global.Lava_Torbjorn_Activation = 0;
		disabled Set Damage Dealt(Event Player, 100);
	}
}

rule("... Ana | Level 2 | Re-activate Ultimate | NOT ULTING")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Event Player.Ana_Level2 >= 100;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Ana))), Custom String(
			"Damage significantly reduced. Lay Low. Use ultimate ASAP"), Null, Left, 2, Color(Purple), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Clear Status(Event Player, Invincible);
		disabled Set Reload Enabled(Event Player, True);
		Set Ammo(Event Player, 0, 100);
		Set Max Ammo(Event Player, 0, 100);
		Set Damage Dealt(Event Player, 10);
		disabled Set Ability 1 Enabled(Event Player, True);
		"se"
		Set Ability Cooldown(Event Player, Button(Ability 2), 2);
		Wait(10, Abort When False);
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("... Ana | Level 2 | HUD-Text on Re-Spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Player.Ana_Level2 >= 100;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		disabled Start Damage Modification(Event Player, Event Player, 100, None);
		disabled Event Player.Ana_Immunity = Last Damage Modification ID;
		Create HUD Text(Event Player, Custom String("{1} Level 2", Null, Hero Icon String(Hero(Ana))), Custom String(
			"While Nano'd all damage sleeps and fatally \r\npoisons your target. Reduced Ammo and higher cooldowns"), Null, Left, 2, Color(
			Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
	}
}

rule("Widowmaker")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Widowmaker_ThirdEye = 60;
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} ULT = Shoot through walls", Null, Hero Icon String(Hero(Widowmaker))), Null, Null,
			Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Null, Custom String("1. All your damage instantly kills"), Null, Left, 2, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		disabled Create HUD Text(Event Player, Custom String("{2} Share your intel with everyone else:", Null, Hero Icon String(Hero(Widowmaker)),
			Icon String(Exclamation Mark)), Event Player.Widowmaker_ThirdEye, Null, Left, 2, Color(Blue), Color(Blue), Color(White),
			Visible To and String, Default Visibility);
		disabled Event Player.HUD_Text_2 = Last Text ID;
	}
}

rule("... Widowmaker | Instant Kill")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Widowmaker);
		Has Status(Victim, Unkillable) != True;
	}

	actions
	{
		Kill(Victim, Attacker);
	}
}

rule("... Widowmaker Ultimate Active")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Purple), Always);
	}
}

rule("... Widowmaker | shoot through wall  - via Ozbeneli#2731")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Firing Primary(Event Player) == True;
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Damage(Players in View Angle(Event Player, All Teams, Absolute Value(1.250)), Event Player, 120);
	}
}

rule("... Widowmaker | primary shoot via Ozbeneli#2731")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) != True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Damage(Players in View Angle(Event Player, All Teams, Absolute Value(1.250)), Event Player, 5);
	}
}

rule("... Widowmaker | See through walls warning")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.Widow_Warning_HUD);
		disabled Create Icon(All Players(All Teams), Event Player, Diamond, Visible To and Position, Color(White), True);
		disabled Event Player.Widow_Sights_Icon = Last Created Entity;
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String(
			"{1} {0} can shoot through walls. Kill them or be sniped! {2}", Event Player, Hero Icon String(Hero(Widowmaker)),
			Ability Icon String(Hero(Widowmaker), Button(Ultimate))), Custom String("(look for the purple outline)"), Null, Top, 2, Color(
			Turquoise), Color(Purple), Color(White), Visible To and String, Default Visibility);
		Event Player.Widow_Warning_HUD = Last Text ID;
		Wait(10, Ignore Condition);
		Destroy HUD Text(Event Player.Widow_Warning_HUD);
		Destroy Icon(Event Player.Widow_Sights_Icon);
		disabled Loop If Condition Is True;
	}
}

rule("...Widowmaker No Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Stop Forcing Player Outlines(Event Player, All Players(All Teams));
	}
}

rule("... Tracer - Health Pack Collection")
{
	event
	{
		Player Received Healing;
		All;
		Tracer;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Event Was Health Pack == True;
	}

	actions
	{
		Event Player.Tracer_Health_Pack_Heals += Event Healing;
		Log To Inspector(Custom String("Tracer Heal Log {0}", Event Healing));
	}
}

rule("Junkrat")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Destroy HUD Text(Event Player.Hud_Text_3);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Strong damage", Null, Hero Icon String(Hero(Junkrat))), Null, Null, Left, 1,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Null, Custom String("1. Enemies near you catch on fire (Passive)"), Null, Left, 2, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Custom String(""), Custom String("2. While ulting passive dmg increased and\r\nyou can't be killed"),
			Null, Left, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Hud_Text_3 = Last Text ID;
		Set Status(Event Player, Event Player, Burning, Match Time);
		Start Damage Modification(Event Player, Event Player, 0, None);
		Event Player.Junkrat_Burning_Immunity = Last Damage Modification ID;
	}
}

rule("... Junkrat - Burning DOT")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Closest Player To(Event Player, All Teams)) < 4;
		Hero Of(Closest Player To(Event Player, All Teams)) == Hero(Junkrat);
	}

	actions
	{
		If(Distance Between(Event Player, Closest Player To(Event Player, All Teams)) < 4);
			If(Hero Of(Closest Player To(Event Player, All Teams)) == Hero(Junkrat));
				Event Player.ClosestJunkrat = Closest Player To(Event Player, All Teams);
				Set Status(Event Player, Event Player.ClosestJunkrat, Burning, 2);
				If(Is Using Ultimate(Event Player.ClosestJunkrat) == True);
					disabled Create HUD Text(Event Player, Custom String("\"Can't a Junkrat terrorize in peace? Go away!\" - {1}{2}", Event Player,
						Hero Icon String(Hero(Junkrat)), Event Player.ClosestJunkrat), Null, Null, Top, 2, Color(Turquoise), Color(White), Color(
						White), Visible To and String, Default Visibility);
					Small Message(Event Player, Custom String("\"Can't a Junkrat terrorize in peace? Go away!\" - {0}{1}", Hero Icon String(Hero(
						Junkrat)), Event Player.ClosestJunkrat));
					disabled Big Message(Event Player, Custom String("\"Can't a Junkrat terrorize in peace? Go away!\" - {0}{1}", Hero Icon String(Hero(
						Junkrat)), Event Player.ClosestJunkrat));
					disabled Event Player.Junkrat_Burn_Warning = Last Text ID;
					Start Damage Over Time(Event Player, Event Player.ClosestJunkrat, 1, 100);
				Else;
					Small Message(Event Player, Custom String("{0}{1} is burning you! Move back or kill them!", Hero Icon String(Hero(Junkrat)),
						Event Player.ClosestJunkrat));
					disabled Big Message(Event Player, Custom String("{0}{1} is burning you! Move back or kill them!", Hero Icon String(Hero(Junkrat)),
						Event Player.ClosestJunkrat));
					disabled Create HUD Text(Event Player, Custom String("You are standing too close to {1}{2} and are burning! Move or kill him.",
						Event Player, Hero Icon String(Hero(Junkrat)), Event Player.ClosestJunkrat), Null, Null, Top, 2, Color(Turquoise), Color(
						White), Color(White), Visible To and String, Default Visibility);
					disabled Event Player.Junkrat_Burn_Warning = Last Text ID;
					Start Damage Over Time(Event Player, Event Player.ClosestJunkrat, 1, 20);
				End;
				Wait(3.500, Ignore Condition);
				disabled Destroy HUD Text(Event Player.Junkrat_Burn_Warning);
			End;
		End;
		disabled Destroy HUD Text(Event Player.Junkrat_Burn_Warning);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("... Junkrat | Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 125);
		Set Status(Event Player, Null, Phased Out, 9999);
	}
}

rule("... Junkrat | Not Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
		Clear Status(Event Player, Phased Out);
	}
}

rule("Tracer")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Event Player.Tracer_Speed_Force == False;
	}

	actions
	{
		Destroy HUD Text(Event Player.HUD_Text_1);
		Destroy HUD Text(Event Player.Hud_Text_3);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{1} Collect Health Packs", Null, Hero Icon String(Hero(Tracer))), Null, Null, Left, 1,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_1 = Last Text ID;
		Create HUD Text(Event Player, Custom String("Collect 125 health using health \r\npacks to enter Speed Force"), Null, Null, Left, 2,
			Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.HUD_Text_2 = Last Text ID;
		Create HUD Text(Event Player, Null, Custom String("Current Health Collected from Health Packs: {1}", Icon String(Arrow: Down),
			Event Player.Tracer_Health_Pack_Heals), Null, Left, 3, Color(Purple), Color(Red), Color(White), Visible To and String,
			Default Visibility);
		Event Player.Hud_Text_3 = Last Text ID;
		Wait(1, Ignore Condition);
		Set Player Health(Event Player, Max Health(Event Player) - Max Health(Event Player) * 0.900);
		disabled Damage(Event Player, Null, Max Health(Event Player) * 0.225);
		disabled Set Player Health(Event Player, 15);
		disabled Set Ability 2 Enabled(Event Player, False);
		disabled Wait(4, Ignore Condition);
		disabled Set Ability 2 Enabled(Event Player, True);
	}
}

rule("... Tracer | Speed Force Ready")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		disabled Health(Event Player) >= Max Health(Event Player);
		disabled Event Was Health Pack == True;
		Event Player.Tracer_Health_Pack_Heals >= 125;
	}

	actions
	{
		Destroy HUD Text(Event Player.Tracer_HuD_Interact);
		Create HUD Text(Event Player, Custom String(
			"Press [interact] to enter the speed force!\r\n(only if another Tracer isn't already)"), Custom String(""), Custom String(""),
			Top, 2, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Tracer_HuD_Interact = Last Text ID;
		Set Status(Event Player, Null, Burning, Match Time);
		Event Player.Tracer_Speed_Force = True;
	}
}

rule("... Tracer | Speed Force Enter")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Event Player.Tracer_Speed_Force == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Speed_Force_Timer == 0;
		Global.TracerSpeedForcePlayer == 0;
	}

	actions
	{
		Global.TracerSpeedForcePlayer = Event Player;
		Event Player.Trace_Space_Force_Started = True;
		Set Player Health(Event Player, Max Health(Event Player));
		Destroy HUD Text(Event Player.Tracer_HuD_Interact);
		Destroy HUD Text(Event Player.HUD_Text_2);
		Create HUD Text(Event Player, Custom String("You entered the speed force!"), Global.Speed_Force_Timer, Null, Left, 2, Color(Green),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Set Ultimate Charge(Event Player, 100);
		Event Player.Trader_Hud_SP_Active = Last Text ID;
		Create HUD Text(All Players(All Teams), Custom String("{1} {0} entered the speed force!", Event Player, Hero Icon String(Hero(
			Tracer))), Global.Speed_Force_Timer, Null, Top, 1, Color(Red), Color(Red), Color(White), Visible To and String,
			Default Visibility);
		Event Player.Tracer_Hud_SP_Others = Last Text ID;
		Set Status(Event Player, Null, Phased Out, Global.Speed_Force_Duration / Global.Speed_Force_Divider - 0.150);
		Set Slow Motion(100 / Global.Speed_Force_Divider);
		Set Move Speed(Event Player, Global.Speed_Force_Divider * 100);
		Set Damage Dealt(Event Player, Global.Speed_Force_Divider * 200);
		Set Status(Event Player, Event Player, Hacked, Match Time);
		Set Gravity(Event Player, Global.Speed_Force_Divider * 100);
		For Global Variable(Speed_Force_Timer, Global.Speed_Force_Duration, 0, -1);
			Wait(1 / Global.Speed_Force_Divider, Ignore Condition);
		End;
		Clear Status(Event Player, Burning);
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
		Set Gravity(Event Player, 100);
		Set Slow Motion(100);
		Destroy HUD Text(Event Player.Trader_Hud_SP_Active);
		disabled Create HUD Text(Event Player, Custom String("Reach 150 health to enter Speed Force"), Event Player.Tracer_Power, Null, Left, 2,
			Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Event Player.HUD_Text_2 = Last Text ID;
		Destroy HUD Text(Event Player.Tracer_Hud_SP_Others);
		disabled Damage(Event Player, Null, Max Health(Event Player) * 0.225);
		disabled Wait(4, Ignore Condition);
		Clear Status(Event Player, Hacked);
		Event Player.Tracer_Speed_Force = False;
		disabled Set Player Health(Event Player, Max Health(Event Player) - Max Health(Event Player) * 0.900);
		Event Player.Tracer_Health_Pack_Heals = 0;
		disabled Damage(Event Player, Null, Max Health(Event Player) * 0.225);
		Global.TracerSpeedForcePlayer = 0;
	}
}

rule("... Tracer | Cancel Speed Force")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Event Player.Trace_Space_Force_Started == True;
	}

	actions
	{
		Wait Until(Event Player.Tracer_Health_Pack_Heals == 0, 99999);
		disabled Event Player.Tracer_Speed_Force = False;
		disabled Destroy HUD Text(Event Player.HUD_Text_2);
		disabled Create HUD Text(Event Player, Custom String("Collect 100 dhealth using health \r\npacks to enter Speed Force"), Null, Null, Left,
			2, Color(Purple), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Event Player.HUD_Text_2 = Last Text ID;
		Clear Status(Event Player, Burning);
		disabled Event Player.Tracer_Health_Pack_Heals = 0;
		Event Player.Trace_Space_Force_Started = False;
	}
}

rule("Health Packs Scale With Health Except Tracer")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
		Hero Of(Event Player) != Hero(Tracer);
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) + Max Health(Event Player) * 0.333);
	}
}

rule("Test | Dummy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Debug == True;
	}

	actions
	{
		disabled Create Dummy Bot(Hero(Reinhardt), All Teams, -1, Event Player, Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Pharah), All Teams, -1, Event Player, Vector(0, 0, 0));
		Create Dummy Bot(Hero(Zarya), All Teams, -1, Event Player, Vector(0, 0, 0));
	}
}

disabled rule("Test | Dummy Fight Back")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		disabled Start Holding Button(Event Player, Button(Jump));
	}
}

disabled rule("Test | Change Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Call Subroutine(Player_Reset);
		Respawn(Event Player);
	}
}

rule("Test | Activate Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Global.Debug == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("Test | Show Player Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Debug == True;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), Custom String("{2} - Health {0} Distance from Host {1}", Custom String("{0}/{1}",
			Health(Event Player), Max Health(Event Player)), Distance Between(Position Of(Event Player), Position Of(Host Player)),
			Event Player), Event Player, 1, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
	}
}

rule("Test | Player S*icide")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Global.Debug == True;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

rule("Player Self Respawn Exploiting")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Game In Progress == True;
		Event Player.PlayerSelfRespawnCount >= 2;
	}

	actions
	{
		Big Message(Event Player, Custom String("You can only do that twice per game. Ask someone in match chat to help you"));
		Log To Inspector(Custom String("{0} SRD - Current Attempts {1}", Event Player, Event Player.PlayerSelfRespawnCount));
	}
}

rule("Player Self Respawn When Stuck")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Game In Progress == True;
		Event Player.PlayerSelfRespawnCount < 2;
	}

	actions
	{
		Event Player.PlayerSelfRespawnCount += 1;
		Log To Inspector(Custom String("{0} SRA - Current Attempts {1} - Hero {2}", Event Player, Event Player.PlayerSelfRespawnCount,
			Hero Of(Event Player)));
		Call Subroutine(Player_Reset);
		Respawn(Event Player);
	}
}

disabled rule("Lava Debugger")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Event Player.DebugPos = Position Of(Event Player);
		Create HUD Text(All Players(All Teams), Custom String("Pos {0}", Position Of(Event Player)), Null, Null, Top, 0, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Disable Movement Collision With Environment(Event Player, False);
		Set Gravity(Event Player, 0);
		disabled Wait(0.016, Ignore Condition);
		disabled Destroy HUD Text(Last Text ID);
		disabled Loop If Condition Is True;
		disabled Set Gravity(Event Player, 100);
		disabled Enable Movement Collision With Environment(Event Player);
		Create HUD Text(All Players(All Teams), Custom String("direction {0}", Facing Direction Of(Event Player)), Null, Null, Top, 0,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Destroy All Bots")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Global.Debug == True;
	}

	actions
	{
		Destroy All Dummy Bots;
	}
}

disabled rule("Rule 179")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Pharah);
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Jump));
		Wait(2, Ignore Condition);
		Stop Holding Button(Event Player, Button(Jump));
		Wait(1, Ignore Condition);
		Loop;
	}
}